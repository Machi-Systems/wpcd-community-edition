###################################################################################################
# Coding standards
#
# - All function names declared in here should be prefixed with "gf_"  - "Global Function" 
# - All vars declared outside of functions should be prefixed with "gv_" = "Global Variable"
# - Vars declared inside a function should be declared as "local" to avoid polluting 
#   the global namespace.
#       eg: local mylocalvarname
#
# - Function names declared in other scripts should be prefixed with "f_", especially if they are 
#   far away from where they are called in the script. It helps others to easily recognize that 
#   a name is a function being called instead of a variable.
#
##################################################################################################

## colors
## @TODO: Need to prefix these with "GV_".
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
## end colors

## regex patterns
## @TODO: Need to prefix these with "gv_".
sp="[	 ]+" # 1 or multiple spaces or tabs
sm="[	 ]*" # 0 or multiple spaces or tabs
ip="[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" # any ipv4
ip6="\[::1?\]" # any or localhost ipv6
## end regex patterns

## regex patterns http2
ip="[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" # any ipv4
ip6="\[::1?\]" # any or localhost ipv6
remove_http2="s/(^${sm}listen${sp}($ip:)?($ip6:)?[0-9]+${sp}ssl)${sp}http2/\1/"
add_http2="s/(^${sm}listen${sp}($ip:)?($ip6:)?[0-9]+${sp}ssl)(${sm}http2)?/\1 http2/"
has_ssl="^${sm}listen${sp}(${ip}:)?(${ip6}:)?[0-9]+${sp}ssl"
has_http2="^${sm}listen${sp}(${ip}:)?(${ip6}:)?[0-9]+${sp}ssl${sp}http2"
has_http2_ols="([ ]*enableSpdy[ ]*(4|5|7|15))"
## end regex patterns http2

## common phrases
SUCCESSFUL='Success!'

### OLS/LSWS functions
WWW_PATH='/var/www'
LSDIR='/usr/local/lsws'
WEBCF="${LSDIR}/conf/httpd_config.conf"
VHDIR="${LSDIR}/conf/vhosts"
BOTCRON='/etc/cron.d/certbot'
PHPVER=lsphp81

## Misc Variables.
## @TODO: Need to update the NGINX routines and any other related functions with this global var instead of the hard-coded list.
GS_DISABLED_PHP_FUNCTIONS_LIST="dl, exec, fpassthru, getmypid, getmyuid, highlight_file, link, opcache_get_configuration, passthru, pcntl_exec, pcntl_get_last_error, pcntl_setpriority, pcntl_strerror, pcntl_wifcontinued, phpinfo, popen, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec, show_source, source, system, virtual"


#####################################################################
# Function to calculate required free space for a backup.
# If not enough space is available, the script will exit.
# 
# Parameters:
# $1 - Target domain
#
#####################################################################
function gf_check_space_or_exit()
{
	local target_domain=$1
	echo "Checking available disk space for $target_domain"

	local file_size=`du -sm /var/www/$target_domain|awk '{print $1}'`
	local free_size=`df -m|grep -w '/'|awk '{print $4}'`
	local required_size=`echo "$file_size * 2"|bc`

	if [ $free_size -lt $required_size ]
	then
		echo "Server does not have enough disk space to backup the target site. Exiting."
		exit
	fi
}

#####################################################################
# Function to calculate required free space for a backup.
# Unlike the above function, it will only set global
# vars and let the calling program handle things.
#
# This sets three global variables:
# - g_file_size
# - g_free_size
# - g_required_size
# 
# Parameters:
# $1 - Target domain
#
#####################################################################
function g_check_space_no_exit()
{
	local target_domain=$1
	echo "Checking available disk space for $target_domain"

	g_file_size=`du -sm /var/www/$target_domain|awk '{print $1}'`
	g_free_size=`df -m|grep -w '/'|awk '{print $4}'`
	g_required_size=`echo "$g_file_size * 2"|bc`
}

#####################################################################
# Function to flush the caches for a site.
# 
# Parameters:
# $1 - user name
# $2 - Target domain
#
#####################################################################
function g_flush_cache()
{
	local user_name=$1
	local target_domain=$2

	su - $user_name -c "wp cache flush"

	cd /var/www/$target_domain/html/

	su - $user_name -c "wp plugin is-active cache-enabler"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp cache-enabler clear"
	fi

	# wp-super-cache has a separate cli plugin but if we try to 
	# check for it, it always returns a non-zero status for 
	# some reason, regardless of if it's active or not.
	# So we have to just grep the output of a wp command
	# to see if it's on.
	# Link to wp-super-cache plugin on github:
	# https://github.com/wp-cli/wp-super-cache-cli
	su - $user_name -c "wp super-cache status 2>/dev/null |grep On"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp super-cache flush"
	fi

	su - $user_name -c "wp plugin is-active w3-total-cache"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp w3-total-cache flush all"
	fi

	su - $user_name -c "wp plugin is-active wp-fastest-cache"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp fastest-cache clear all"
	fi

	# wp-rocket has a separate cli plugin but if we try to 
	# check for it, it always returns a non-zero status for 
	# some reason, regardless of if it's active or not.
	# So we perform some gymnastics with the WP HELP
	# command to see if it's on.
	# Link to wp-rocket-cli plugin on github:
	# See https://github.com/wp-media/wp-rocket-cli
	su - $user_name -c "wp plugin is-active wp-rocket"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp help|grep rocket"
		if [ $? -eq 0 ]
		then
			su - $user_name -c "wp rocket clean --confirm"
		fi
	fi

	# flush object caches as well
	if [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
	then
		su - $user_name -c "wp litespeed-option set object false > /dev/null 2>&1"
		su - $user_name -c "wp cache flush 2>/dev/null"
	fi

	# reset object cache again should hit nginx here (multiple flushes for if ols is active might be overkill but no harm done.)
	su - $user_name -c "wp cache flush 2>/dev/null"	

}

#####################################################################
# Run a backup with with our standard 08 script.
# Check to make sure files are present, if not exit.
# 
# Parameters:
# $1 - user name
# $2 - Target domain
#
#####################################################################
function g_backup_and_verify() 
{
	local user_name=$1
	local target_domain=$2

	cd ~/
	echo "Preparing to backup $target_domain..."

	## Check if server has enough space to create backup
	g_check_space_no_exit $target_domain
	if [ $g_free_size -lt $g_required_size ]
	then
		echo "Server does not have enough space to Backup WP"
		exit
	fi

	# Run the backup.
	(action=1 . ./08-backup.sh)
	if [ $? -ne 0 ]
	then
		echo "Backup failed, exiting script."
		exit
	fi

	# verify the backup
	backup_files=`find /root/.wp-backup/$domain/ -iname *.gz -mmin -180|wc -l`
	if [ $backup_files -lt 3 ]
	then
		echo "Verify after backup failed, exiting script."
		exit
	fi	
}

#####################################################################
# Run a backup with updraftplus if it's installed.
# 
# Parameters:
# $1 - user name
# $2 - Target domain
#
#####################################################################
function g_backup_with_updraft() 
{
	local user_name=$1
	local target_domain=$2

	echo "Checking for updraftplus..."

	cd /var/www/$target_domain/html/
	su - $user_name -c "wp plugin is-active updraftplus"
	if [ $? -eq 0 ]
	then
		su - $user_name -c "wp help|grep updraftplus"
		if [ $? -eq 0 ]
		then
			echo "Starting backup with updraftplus..."
			su - $user_name -c "wp updraftplus backup"
		fi
	fi
}

###################################################################
## Checks which webserver is installed: openlitespeed or nginx.
## It sets the global g_webserver_type variable which is used
## by almost every other script.
## 
## @export: g_webserver_type 
###################################################################
function gf_check_webserver() {
	if [ -e /usr/local/lsws/bin/lshttpd ]
	then
		if /usr/local/lsws/bin/lshttpd -v | grep -q Open
		then
			# echo 'You have OpenLiteSpeed installed...'
			g_webserver_type='ols'
			g_vhost_conf='vhconf.conf'
		elif /usr/local/lsws/bin/lshttpd -v | grep -q Enterprise
		then
			# LiteSpeed/x.x.x Enterprise
			# echo 'You have LiteSpeed Enterprise installed...'
			g_webserver_type='ols-enterprise'
			g_vhost_conf='vhconf.xml'
		fi
	else
		# echo 'You have Nginx installed...'
		g_webserver_type='nginx'
	fi
}
gf_check_webserver

###################################################################
## select domain from installed sites ####
###################################################################
function gf_select_domain() {
	echo
	ls /var/www | grep -v html | nl
	read -p "Select site: " site_number
	number_of_sites=$(ls /var/www | grep -v html | wc -l)
	until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
	do
		echo "$site_number: invalid selection."
		read -p "Select site: " site_number
	done
}

###################################################################
#### Select users from all sftp users
###################################################################
function gf_select_sftp_user() {
	grep ':33::/var/www' /etc/passwd | grep '/bin/false' | cut -d ':' -f 1 | nl
	echo
	read -p "Select site user: " site_number
	number_of_sites=$(grep ':33::/var/www' /etc/passwd | grep '/bin/false' | cut -d ':' -f 1 | wc -l)
	until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
	do
		echo "$site_number: invalid selection."
		read -p "Select user: " site_number
	done
}

###################################################################
#### Select users from all installed sites 
###################################################################
function gf_select_user() {
	grep ':33::/var/www' /etc/passwd | grep '/bin/bash' | cut -d ':' -f 1 | nl
	echo
	read -p "Select site user: " site_number
	number_of_sites=$(grep ':33::/var/www' /etc/passwd | grep '/bin/bash' | cut -d ':' -f 1 | wc -l)
	until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
	do
		echo "$site_number: invalid selection."
		read -p "Select user: " site_number
	done
}

###################################################################
#### select domain from nginx ols sites enabled option
###################################################################
function gf_select_domain_nginx_ols() {
	if [ "$g_webserver_type" = "nginx" ]
	then
		ls /etc/nginx/sites-enabled/ | grep -v '^default$\|^monit$\|^monitorix$' | nl
		read -p "Select site: " site_number
		number_of_sites=$(ls /etc/nginx/sites-enabled/ | grep -v '^default$\|^monit$\|^monitorix$' | wc -l)
		until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
		do
			echo "$site_number: invalid selection."
			read -p "Select site: " site_number
		done
		domain=$(ls /etc/nginx/sites-enabled/ | grep -v '^default$\|^monit$\|^monitorix$' | sed -n "$site_number"p)
	elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
	then
		ls ${VHDIR}/ | grep -Ev "^Example|htgroup|htpasswd|$g_vhost_conf" | nl
		read -p "Select site: " site_number
		number_of_sites=$(ls ${VHDIR}/ | grep -Ev "^Example|htgroup|htpasswd|$g_vhost_conf" | wc -l)
		until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
		do
			echo "$site_number: invalid selection."
			read -p "Select site: " site_number
		done
		domain=$(ls ${VHDIR}/ | grep -Ev "^Example|htgroup|htpasswd|$g_vhost_conf" | sed -n "$site_number"p)
	fi
}

###################################################################
#### Restart Webserver ols or nginx
###################################################################
# shellcheck disable=SC2120
function gf_restart_webserver() {
	local killall
	killall="${1:-false}"
	# Restart Appropriate Webserver
	if [ "$g_webserver_type" = "nginx" ]
	then
		# restart nginx
		systemctl restart nginx
	elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
	then
		if [ "$killall" = "true" ]
		then
			# rm -rf /usr/local/lsws/cachedata/*
			# kill detached lsphp processes and restart ols
			/usr/local/lsws/bin/lswsctrl stop >/dev/null 2>&1
			killall -9 lsphp >/dev/null 2>&1
			systemctl stop lsws >/dev/null 2>&1
			systemctl start lsws
		else
			systemctl restart lsws
		fi
	fi
}

#####################################################################
### Check SSL certificate valid (Signed and not expired)
#####################################################################
function gf_check_ssl_valid(){
	local domain
	local port
	domain="$1"
	port="${2:-443}" # defaults to port 443 unless provided
	if true | openssl s_client -connect "${domain}":"${port}" 2>/dev/null | \
		openssl x509 -noout -checkend 0; then
		echo "Certificate is not selfsigned/expired for: ${domain}:${port}"
	else
		echo "Error: Certificate is selfsigned/expired for: ${domain}:${port}"
		echo | openssl s_client -servername "$domain" -connect "${domain}":"${port}" 2>/dev/null | openssl x509 -noout -issuer -subject -dates
		return 1
	fi
}

###################################################################
#### Check if ssl enabled for ols site
###################################################################
function gf_is_ssl_ols() {
	local olsdomain
	olsdomain=$1
	grep -qP "keyFile[ ]*/etc/letsencrypt/live" ${VHDIR}/$olsdomain/$g_vhost_conf
}

###################################################################
#### Check if ssl enabled for ols enterprise site
###################################################################
function gf_is_ssl_ols_enterprise() {
	local olsdomain
	olsdomain=$1
	# <keyFile>/etc/letsencrypt/live/$VH_NAME/privkey.pem</keyFile>
	grep -qP "<keyFile>[ ]*/etc/letsencrypt/live" ${VHDIR}/$olsdomain/$g_vhost_conf
}


###################################################################
#### Enable certbot ssl for nginx domain
###################################################################
function gf_enable_certbot_nginx_site() {
	local nginxdomain
	local nginxconf
	nginxdomain=$1
	nginxconf=$2

	if grep -qs "listen 443" /etc/nginx/sites-enabled/$nginxconf;
	then
		echo "SSL Already Enabled";
		exit
	else
		if [[ -z $email ]]
		then
			echo "Specify an email for administrative notifications about your certificate"
			read -p "Email address: " email
		fi
		certbot --non-interactive --reinstall --expand --nginx --agree-tos -m $email --allow-subset-of-names --redirect -d $nginxdomain -d www.$nginxdomain || certbot --non-interactive --reinstall --expand --nginx --agree-tos -m $email --allow-subset-of-names --redirect -d $nginxdomain
		if ! grep -qs "listen 443" /etc/nginx/sites-enabled/$nginxconf
		then
			echo "SSL could not be enabled for $nginxdomain"
			# important that we exit here. Otherwise script #4 which uses this will proceed as if nothing happened.
			# That in turn will inform any UI using these scripts that SSL was successful - which it was NOT.
			# If we need a calling script to continue even after SSL has failed then we need a way to return a value
			# to the calling script and make sure that script #4 and other ssl handling scripts make use of the returned value.			
			exit 1
		else
			echo
			echo "SSL has been enabled for $nginxdomain"		
		fi
		systemctl restart nginx
	fi
}

###################################################################
#### Disable certbot ssl for nginx domain
###################################################################
function gf_disable_certbot_nginx_site() {
	local nginxdomain
	local nginxconf
	nginxdomain=$1
	nginxconf=$2
	if grep -qs "managed by Certbot" /etc/nginx/sites-enabled/$nginxconf;
	then
		certbot --non-interactive delete --cert-name $nginxdomain
		sed -i -n '/if ($host/q;p' /etc/nginx/sites-enabled/$nginxconf
		sed -i '$ d' /etc/nginx/sites-enabled/$nginxconf
		sed -i '/server {/a listen 80;\nlisten [::]:80;' /etc/nginx/sites-enabled/$nginxconf
		sed -i '/managed by Certbot/d' /etc/nginx/sites-enabled/$nginxconf
		systemctl restart nginx
	else
		echo "SSL Not enabled for $nginxdomain";
		exit
	fi
}

###################################################################
#### Disable certbot ssl for ols domain
###################################################################
function gf_disable_certbot_ols_site() {
	local olsdomain
	olsdomain=$1
	if [ ! -d "/etc/letsencrypt/live/$olsdomain" ]
	then
		echo
		echo "SSL is already disabled for $olsdomain"
	fi
	if [ -d "/etc/letsencrypt/live/$olsdomain" ]
	then
		certbot delete --cert-name $olsdomain --noninteractive
	fi
	sed -i "s|/etc/letsencrypt/live/$olsdomain/privkey.pem|/usr/local/lsws/conf/example.key|g" ${VHDIR}/${olsdomain}/$g_vhost_conf > /dev/null 2>&1
	sed -i "s|/etc/letsencrypt/live/$olsdomain/fullchain.pem|/usr/local/lsws/conf/example.crt|g" ${VHDIR}/${olsdomain}/$g_vhost_conf > /dev/null 2>&1
	echo "certificate has been successfully uninstalled..."
	gf_restart_webserver
}

###################################################################
#### Enable https redirect for ols domain in .htaccess
###################################################################
function gf_enable_https_redirect_ols_htaccess() {
	local olsdomain
	olsdomain=$1
	
	HTACC="/var/www/$olsdomain/html/.htaccess"
	grep 'https://%{HTTP_HOST}%{REQUEST_URI}' "${HTACC}"
	if [ $? -ne 0 ] ; then
		sed -i "1 i\### Forcing HTTPS rule start\nRewriteEngine On\nRewriteCond %{SERVER_PORT} 80\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n### Forcing HTTPS rule end" "${HTACC}"
		chown "${user_name}":www-data "${HTACC}"
		echo
		echo "HTTPS redirect enabled for $olsdomain"
		gf_restart_webserver
	else
		echo
		echo "HTTPS redirect already enabled for $olsdomain"
	fi
}

###################################################################
#### Disable https redirect for ols domain in .htaccess
###################################################################
function gf_disable_https_redirect_ols_htaccess() {
	local olsdomain
	olsdomain=$1
	
	HTACC="/var/www/$olsdomain/html/.htaccess"
	grep 'https://%{HTTP_HOST}%{REQUEST_URI}' "${HTACC}"
	if [ $? -ne 0 ] ; then
		echo
		echo "HTTPS redirect already disabled for $olsdomain"
	else
		sed -i -re '/### Forcing HTTPS rule start/{:a;N;/### Forcing HTTPS rule end/!ba};/RewriteRule/d' "${HTACC}"
		chown "${user_name}":www-data "${HTACC}"
		echo
		echo "HTTPS redirect disabled for $olsdomain"
		gf_restart_webserver
	fi
	
}

###################################################################
#### Enable https redirect for ols vhost conf
###################################################################
function gf_enable_https_redirect_ols_vhost() {
	local olsdomain
	local vhost_conf_name
	olsdomain=$1
	default_vhost_conf_name="$olsdomain"
    vhost_conf_name="${2:-$default_vhost_conf_name}" # optional param so we can selectively change vhost conf name from default 'domain.tld' only if provided
	
	# In vhost config
	# insert redirect to https inside the rewrite under wellknown rule just under <<<END_rules
	# RewriteCond %{SERVER_PORT} ^80$ # Enable HTTPS
	# RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [R=301,L] # Enable HTTPS
	sed -i "${VHDIR}/${vhost_conf_name}/$g_vhost_conf" -re "/<<<END_rules/a RewriteCond %{SERVER_PORT} ^80$ # Enable HTTPS\nRewriteRule .* https:\/\/%{SERVER_NAME}%{REQUEST_URI} [R=301,L] # Enable HTTPS"
	chown -R lsadm:lsadm ${VHDIR}/${vhost_conf_name}/*
	echo
	echo "HTTPS redirect enabled for $vhost_conf_name"
	gf_restart_webserver
}

###################################################################
#### Disable https redirect for ols vhost conf
###################################################################
function gf_disable_https_redirect_ols_vhost() {
	local olsdomain
	local vhost_conf_name
	olsdomain=$1
	default_vhost_conf_name="$olsdomain"
    vhost_conf_name="${2:-$default_vhost_conf_name}" # optional param so we can selectively change vhost conf name from default 'domain.tld' only if provided
	
	# Lets find and delete the two lines with '# Enable HTTPS'
	# RewriteCond %{SERVER_PORT} ^80$ # Enable HTTPS
	# RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [R=301,L] # Enable HTTPS
	sed -i "${VHDIR}/${vhost_conf_name}/$g_vhost_conf" -re '/# Enable HTTPS/d'
	chown -R lsadm:lsadm ${VHDIR}/${vhost_conf_name}/*
	echo
	echo "HTTPS redirect disabled for $vhost_conf_name"
	gf_restart_webserver
}

###################################################################
#### Enable certbot ssl for ols domain
#### $1: Domain name
#### $2: Register Unsafely (optional, any value)
###################################################################
function gf_enable_certbot_ols_site() {
	local olsdomain
	local register_unsafely
	local DOCHM
	local l_user_name
	
	olsdomain=$1
	register_unsafely=$2
	l_user_name=$(echo $olsdomain | cut -c1-32)
	
	# only ask for email if register_unsafely flag isn't set.
	if [[ -z $register_unsafely ]]
	then
		if [[ -z $email ]]
		then
			echo "Specify an email for administrative notifications about your certificate"
			read -p "Email address: " email
		fi
	fi
	DOCHM="/var/www/${olsdomain}/html"
	
	# Call certbot.
	if [[ -z $email ]] 
	then
		# Register unsafely.
		certbot certonly --non-interactive --agree-tos --register-unsafely-without-email --allow-subset-of-names --expand --webroot -w ${DOCHM} -d ${olsdomain} -d www.${olsdomain}||certbot certonly --non-interactive --agree-tos --register-unsafely-without-email --allow-subset-of-names --expand --webroot -w ${DOCHM} -d ${olsdomain}
	else
		# A value for the email address should be available otherwise this will cause issues.
		certbot certonly --non-interactive --agree-tos -m ${email} --allow-subset-of-names  --expand --webroot -w ${DOCHM} -d ${olsdomain} -d www.${olsdomain}||certbot certonly --non-interactive --agree-tos -m ${email} --allow-subset-of-names --expand --webroot -w ${DOCHM} -d ${olsdomain}
	fi
	
	if [[ -e /etc/letsencrypt/live/$olsdomain/fullchain.pem ]]
	then
		sed -i "s|/usr/local/lsws/conf/example.key|/etc/letsencrypt/live/$olsdomain/privkey.pem|g" ${VHDIR}/${olsdomain}/$g_vhost_conf > /dev/null 2>&1
		sed -i "s|/usr/local/lsws/conf/example.crt|/etc/letsencrypt/live/$olsdomain/fullchain.pem|g" ${VHDIR}/${olsdomain}/$g_vhost_conf > /dev/null 2>&1
		# Should we check that https works before reporting this? If so uncomment the below line.
		# gf_check_ssl_valid "$olsdomain"
		gf_enable_https_redirect_ols_htaccess "$olsdomain" # The calling program might handle this redirect but it doesn't hurt to do it here as well, just in case.
		gf_restart_webserver			
		echo
		echo "SSL has been enabled for $olsdomain"
		echo		
	else
		# Certbot failed.
		echo "SSL could not be enabled for $olsdomain"
		# Error handling needs to be done by the calling function.
		return 1
	fi
}

function gf_is_http2_ols() {
	local domain
	domain="$1"
	# https://http2.pro/doc/LiteSpeed
	# https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:config:enable-http2
	# If is any one of these values http2 is enabled 4,5,7,15
	grep -qP "${has_http2_ols}" ${VHDIR}/${domain}/$g_vhost_conf
}

###################################################################
#### Enable http2 for ols domain
###################################################################
function gf_enable_http2_ols_site() {
	local olsdomain
	olsdomain=$1
	if gf_is_ssl_ols "$olsdomain"
	then
		if gf_is_http2_ols "$olsdomain"
		then
			echo -e "${BLUE}http2 is already enabled for domain='${olsdomain}', nothing to do${NC}" # SKIP
		else
			# Setting to 15 is default which enables HTTP/3, HTTP/2, and SPDY HTTP
			# Other valid numbers can be found in our internal issue tracking here: https://bitbucket.org/structuredmarketsinc/fireupwp-bash-scripts/issues/267/question-ols-http2
			sed -i 's|enableSpdy.*|enableSpdy              15|' ${VHDIR}/${olsdomain}/$g_vhost_conf
			if gf_is_http2_ols "$olsdomain"
			then
				echo -e "${GREEN}http2 enabled for domain='${olsdomain}' ${NC}" # ACTION
				gf_restart_webserver
			else
				echo -e "${RED}ERROR: enabling http2 for '${olsdomain}' error${NC}" >&2 # ERROR
			fi
		fi
	else
		echo -e "${ORANGE}Could not enable http2 on '${olsdomain}' when SSL is disabled${NC}" # WARNING
	fi
}

###################################################################
#### Disable http2 for ols domain
####
#### $1 The domain we're working with.
###################################################################
function gf_disable_http2_ols_site() {
	local olsdomain
	olsdomain=$1
	if gf_is_http2_ols "$olsdomain"
	then
		# Setting to 11 is disables HTTP/2 and leaves HTTP/3, and SPDY HTTP enabled
		# Setting to 1 only enables HTTP 1.1.
		# Other valid numbers can be found in our internal issue tracking here: https://bitbucket.org/structuredmarketsinc/fireupwp-bash-scripts/issues/267/question-ols-http2
		sed -i 's|enableSpdy.*|enableSpdy              0|' ${VHDIR}/${olsdomain}/$g_vhost_conf
		if gf_is_http2_ols "$olsdomain"
		then
			echo -e "${RED}ERROR: http2 disabling for '${olsdomain}' error${NC}" >&2 # ERROR
		else
			echo -e "${GREEN}http2 disabled for domain='${olsdomain}' ${NC}" # ACTION
			gf_restart_webserver
		fi
	else
		echo -e "${BLUE}http2 is already disabled for domain='${olsdomain}', nothing to do${NC}" # SKIP
	fi
}

##########################################################################
#### Install certbot ssl for ols domain when ssl config already enabled
####
#### @TODO: Why are we using certonly here for ols instead of reinstall
####        like we do for NGINX?
####
#### @param $1 The domain we're managing.
####
#### *** Does not look like this function is used anywhere right now.
##########################################################################
function gf_install_certbot_ols_site() {
	local olsdomain
	local DOCHM
	olsdomain=$1
	DOCHM="/var/www/${olsdomain}/html"
	if gf_is_ssl_ols $olsdomain || gf_is_ssl_ols_enterprise $olsdomain
	then
		# certbot certonly --non-interactive --agree-tos -m ${email} --webroot -w ${DOCHM} -d ${olsdomain} -d www.${olsdomain}||certbot certonly --non-interactive --agree-tos -m ${email} --webroot -w ${DOCHM} -d ${olsdomain}
		certbot certonly --non-interactive -q --expand --agree-tos --register-unsafely-without-email --allow-subset-of-names --webroot -w ${DOCHM} -d ${olsdomain} -d www.${olsdomain}||certbot certonly --non-interactive -q --expand --agree-tos --register-unsafely-without-email --allow-subset-of-names --webroot -w ${DOCHM} -d ${olsdomain}
	else
		echo
		echo "SSL could not be enabled for $olsdomain"
	fi
}

###################################################################
#### Create database
#### @param $1 Database name to create.
#### @param $2 Database user name.
#### @param $1 Database password.
###################################################################
function gf_database_create() {
	local DB_NAME
	local DB_USERNAME
	local DB_PASSWORD
	local DB_HOST
	DB_NAME="$1"
	DB_USERNAME="$2"
	DB_PASSWORD="$3"
	DB_HOST="$4"

	# echo "Creating ${DB_NAME} and granting privileges"
	mysql <<QUERY
CREATE DATABASE $DB_NAME;
GRANT ALL ON $DB_NAME.* TO '$DB_USERNAME'@'$DB_HOST' IDENTIFIED BY '$DB_PASSWORD' WITH GRANT OPTION;
FLUSH PRIVILEGES;
QUERY
}

###################################################################
#### Add php fpm conf for domain with specific username
####
#### @param $1: Domain
#### @param $2: User name (usually the first 32 chars of the domain name)
#### @param $3: PHP Version (usually 8.1)
###################################################################
function gf_add_php_conf() {
	local php_domain
	local php_user
	local php_version
	php_domain=$1
	php_user=$2
	php_version=$3
	echo "[$php_domain]
user = $php_user
group = www-data
listen = /run/php/php-fpm-$php_domain.sock
listen.owner = $php_user
listen.group = www-data
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
php_admin_value[open_basedir] = \"/var/www/$php_domain/html/:/tmp/\"
php_admin_value[allow_url_fopen] = 0
php_admin_value[allow_url_include] = 0
php_admin_value[disable_functions] =  dl, exec, fpassthru, getmypid, getmyuid, highlight_file, link, opcache_get_configuration, passthru, pcntl_exec, pcntl_get_last_error, pcntl_setpriority, pcntl_strerror, pcntl_wifcontinued, phpinfo, popen, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec, show_source, source, system, virtual
php_admin_value[session.use_strict_mode] = 1
php_admin_value[session.cookie_httponly] = 1
php_admin_value[session.use_cookies] = 1
php_admin_value[session.use_only_cookies] = 1
php_admin_value[session.use_trans_sid] = 0" > /etc/php/$php_version/fpm/pool.d/$php_domain.conf
	if [[ ! -f /etc/wpcd/php-versions-disabled/$php_version ]]
	then
		systemctl restart php$php_version-fpm
	fi
}

###################################################################
#### add nginx conf for newly created site
###################################################################
function gf_add_nginx_conf() {
	local nginx_domain
	local nginx_webroot
	local nginx_site
	nginx_domain=$1
	nginx_webroot=$2
	nginx_site=$3
	# it's very important to escape the variables and quotes within the echo
	echo "include /etc/nginx/common/6g[.]conf;
include /etc/nginx/common/7g[.]conf;
include /etc/nginx/userconfigs/http/*.conf;		#user custom configuration

server {

    include /etc/nginx/common/deny*.conf;
    include /etc/nginx/userconfigs/server/*.conf;	#user custom configuration

    listen 80;
    listen [::]:80;

    root /var/www/$nginx_webroot/html;
    index index.php index.html index.htm;

    server_name $nginx_domain www.$nginx_domain;

    client_max_body_size 25M;

    # Needed for page-level caching when cache-enabler plugin is installed
    include /etc/nginx/common/cache_enabler.conf;

    # Compress certain files with gzip.
    include /etc/nginx/common/gzip[.]conf;

    # Cache certain filetypes in the browser
    include /etc/nginx/common/browsercache[.]conf;

    # Prepare for phpmyadmin when it's installed
    location ~ /phpMyAdmin/.*\.php$ {
        allow all;
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php-fpm-$nginx_webroot.sock;
    }

    # Handler for PHP files
    location ~ \.php$ {
        # Restrict wp-login to 10 requests per period
        location ~ \wp-login.php$ {
            limit_req zone=WPLOGIN;
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/run/php/php-fpm-$nginx_webroot.sock;
        }

        fastcgi_param PHP_VALUE \"
        \";
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php-fpm-$nginx_webroot.sock;
        fastcgi_buffers 16 32k;
        fastcgi_buffer_size 64k;
        fastcgi_busy_buffers_size 64k;
    }

    location / {
        try_files \$cache_enabler_uri \$cache_enabler_uri2 @cachemiss; 
    }

    location @cachemiss {
        try_files \$uri \$uri/ \$custom_subdir/index.php?\$args; 
    }

    # Security Headers	
    add_header X-Frame-Options \"SAMEORIGIN\" always;
    add_header X-XSS-Protection \"1; mode=block\" always;
    add_header X-Content-Type-Options \"nosniff\" always;
    add_header Referrer-Policy \"no-referrer, strict-origin-when-cross-origin\" always;
    add_header X-Download-Options \"noopen\";
    add_header Strict-Transport-Security \"max-age=30000000; includeSubDomains; preload\" always;

    # OSCP Settings
    ssl_stapling on;
    ssl_stapling_verify on;	

    # include user custom configurations
    include /etc/nginx/userconfigs/site/$nginx_webroot-*.conf;

}" > /etc/nginx/sites-enabled/$nginx_site
}

###################################################################
#### Add ols main conf
###################################################################
function gf_add_ols_main_conf() {
	
	# Reference: https://openlitespeed.org/kb/ols-configuration-examples/#Main_Configuration_File
	# https://openlitespeed.org/kb/openlitespeed-directive-working-in-progress/
	# We are going to overwrite the default config entirely.
	cat > ${WEBCF} <<- EOF
	serverName                \$HOSTNAME
	user                      nobody
	group                     nogroup
	priority                  0
	enableLVE                 0
	inMemBufSize              60M
	swappingDir               /tmp/lshttpd/swap
	autoFix503                1
	gracefulRestartTimeout    300
	mime                      conf/mime.properties
	showVersionNumber         0
	adminEmails               root@localhost

	errorlog \$SERVER_ROOT/logs/error.log {
	  logLevel                DEBUG
	  debugLevel              0
	  rollingSize             10M
	  keepDays                35
	  compressArchive         1
	  enableStderrLog         1
	}

	accesslog \$SERVER_ROOT/logs/access.log {
	  logFormat               %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"
	  rollingSize             10M
	  keepDays                35
	  compressArchive         1
	}

	indexFiles                index.html, index.php

	expires  {
	  enableExpires           1
	  expiresByType           image/*=A604800,text/css=A604800,application/x-javascript=A604800,application/javascript=A604800,font/*=A604800,application/x-font-ttf=A604800
	}
	autoLoadHtaccess          1

	tuning  {
	  maxConnections          10000
	  maxSSLConnections       10000
	  connTimeout             300
	  maxKeepAliveReq         10000
	  keepAliveTimeout        5
	  sndBufSize              0
	  rcvBufSize              0
	  maxReqURLLen            32768
	  maxReqHeaderSize        65536
	  maxReqBodySize          2047M
	  maxDynRespHeaderSize    32768
	  maxDynRespSize          2047M
	  maxCachedFileSize       4096
	  totalInMemCacheSize     20M
	  maxMMapFileSize         256K
	  totalMMapCacheSize      40M
	  useSendfile             1
	  fileETag                28
	  enableGzipCompress      1
	  compressibleTypes       text/*, application/atom+xml, application/geo+json, application/x-javascript, application/javascript, application/xml, application/xml+rss, application/json, application/ld+json, application/rdf+xml, application/rss+xml, application/schema+json, application/manifest+json, application/vnd.ms-fontobject, application/vnd.geo+json, application/wasm, application/x-font, application/x-font-opentype, application/x-font-otf, application/x-font-truetype, application/x-font-ttf, application/xhtml+xml, application/x-web-app-manifest+json, image/svg+xml, image/x-icon, image/x-win-bitmap, image/vnd.microsoft.icon, image/bmp, font/eot, font/opentype, font/otf, font/ttf
	  enableDynGzipCompress   1
	  gzipCompressLevel       9
	  gzipAutoUpdateStatic    1
	  gzipStaticCompressLevel 6
	  brStaticCompressLevel   11
	  gzipMaxFileSize         20M
	  gzipMinFileSize         300

	  quicEnable              1
	  quicShmDir              /dev/shm
	}

	fileAccessControl  {
	  followSymbolLink        2
	  checkSymbolLink         0
	  forceStrictOwnership    1
	  requiredPermissionMask  000
	  restrictedPermissionMask 000
	}

	perClientConnLimit  {
	  staticReqPerSec         0
	  dynReqPerSec            0
	  outBandwidth            0
	  inBandwidth             0
	  softLimit               10000
	  hardLimit               10000
	  gracePeriod             15
	  banPeriod               300
	}

	CGIRLimit  {
	  maxCGIInstances         20
	  minUID                  11
	  minGID                  10
	  priority                0
	  CPUSoftLimit            10
	  CPUHardLimit            50
	  memSoftLimit            1460M
	  memHardLimit            1470M
	  procSoftLimit           400
	  procHardLimit           450
	}
	bubbleWrap                1

	accessDenyDir  {
	  dir                     /
	  dir                     /etc/*
	  dir                     /dev/*
	  dir                     conf/*
	  dir                     admin/conf/*
	}
	
	# The remote IPS Sucuri/CloudFlare ranges: https://kb.sucuri.net/firewall/Troubleshooting/same-user-ip#litespeed https://www.cloudflare.com/ips/ and reference: https://openlitespeed.org/kb/show-real-visitor-ip-instead-of-cloudflare-ips/ 
	accessControl  {
	  allow                   ALL, localhostT, 127.0.0.1T, 2a06:98c0::/29T, 2c0f:f248::/32T, 103.21.244.0/22T, 103.22.200.0/22T, 103.31.4.0/22T, 104.16.0.0/13T, 104.24.0.0/14T, 108.162.192.0/18T, 131.0.72.0/22T, 2400:cb00::/32T, 141.101.64.0/18T, 162.158.0.0/15T, 172.64.0.0/13T, 173.245.48.0/20T, 188.114.96.0/20T, 190.93.240.0/20T, 197.234.240.0/22T, 198.41.128.0/17T, 2405:8100::/32T, 2405:b500::/32T, 2606:4700::/32T, 2803:f800::/32T, 192.88.134.0/23T, 185.93.228.0/22T, 66.248.200.0/22T, 208.109.0.0/22T, 2a02:fe80::/29T
	}

	extprocessor lsphp {
	  type                    lsapi
	  address                 uds://tmp/lshttpd/lsphp.sock
	  maxConns                10
	  env                     PHP_LSAPI_CHILDREN=10
	  env                     LSAPI_AVOID_FORK=200M
	  initTimeout             60
	  retryTimeout            0
	  persistConn             1
	  respBuffer              0
	  autoStart               1
	  path                    lsphp81/bin/lsphp
	  backlog                 100
	  instances               1
	  priority                0
	  memSoftLimit            2047M
	  memHardLimit            2047M
	  procSoftLimit           1400
	  procHardLimit           1500
	}

	scripthandler  {
	  add                     lsapi:lsphp php
	}

	railsDefaults  {
	  maxConns                1
	  env                     LSAPI_MAX_IDLE=60
	  initTimeout             60
	  retryTimeout            0
	  pcKeepAliveTimeout      60
	  respBuffer              0
	  backlog                 50
	  runOnStartUp            3
	  extMaxIdleTime          300
	  priority                3
	  memSoftLimit            2047M
	  memHardLimit            2047M
	  procSoftLimit           500
	  procHardLimit           600
	}

	wsgiDefaults  {
	  maxConns                5
	  env                     LSAPI_MAX_IDLE=60
	  initTimeout             60
	  retryTimeout            0
	  pcKeepAliveTimeout      60
	  respBuffer              0
	  backlog                 50
	  runOnStartUp            3
	  extMaxIdleTime          300
	  priority                3
	  memSoftLimit            2047M
	  memHardLimit            2047M
	  procSoftLimit           500
	  procHardLimit           600
	}

	nodeDefaults  {
	  maxConns                5
	  env                     LSAPI_MAX_IDLE=60
	  initTimeout             60
	  retryTimeout            0
	  pcKeepAliveTimeout      60
	  respBuffer              0
	  backlog                 50
	  runOnStartUp            3
	  extMaxIdleTime          300
	  priority                3
	  memSoftLimit            2047M
	  memHardLimit            2047M
	  procSoftLimit           500
	  procHardLimit           600
	}
	
	# https://openlitespeed.org/kb/openlitespeed-cache-module/
	module cache {
	  internal                1
	#          1
	checkPrivateCache   1
	checkPublicCache    1
	maxCacheObjSize     10000000
	maxStaleAge         200
	qsCache             1
	reqCookieCache      1
	respCookieCache     1
	ignoreReqCacheCtrl  1
	ignoreRespCacheCtrl 0

	enableCache         0
	expireInSeconds     3600
	enablePrivateCache  0
	privateExpireInSeconds 3600
	ls_enabled              1
	}

	virtualhost Example {
	  vhRoot                  Example/
	  configFile              conf/vhosts/Example/vhconf.conf
	  allowSymbolLink         1
	  enableScript            1
	  restrained              1
	  setUIDMode              0
	}

	listener Default {
	  address                 *:80
	  secure                  0
	  map                     Example *
	}

	listener Defaultssl {
	  address                 *:443
	  secure                  1
	  keyFile                 /usr/local/lsws/conf/example.key
	  certFile                /usr/local/lsws/conf/example.crt
	  map                     Example *
	}

	# Commented out for future use if we actually need this
	# vhTemplate WPCDDefault {
	#   templateFile            \$SERVER_ROOT/conf/templates/wpcd-default.conf
	#   listeners               Default, Defaultssl
	#   note                    custom ols vhost template for wp-cloud-deploy admins to modify
	# }
	EOF
	chmod 750 ${WEBCF} > /dev/null 2>&1
	chown lsadm:nogroup ${WEBCF} > /dev/null 2>&1
	systemctl stop lsws >/dev/null 2>&1
    systemctl start lsws >/dev/null 2>&1
}

###################################################################
#### Add ols vhost conf
###################################################################
function gf_add_ols_conf() {
	local olsdomain
	olsdomain=$1

	mkdir -p $VHDIR/$olsdomain
	touch $VHDIR/$olsdomain/htpasswd
	touch $VHDIR/$olsdomain/htgroup

	cat > ${VHDIR}/${olsdomain}/$g_vhost_conf <<- EOF
	docRoot                   \$VH_ROOT/html
	vhDomain                  \$VH_DOMAIN
	vhAliases                 www.\$VH_DOMAIN
	adminEmails               admin@$olsdomain
	enableGzip                1
	enableBr                  1

	errorlog \$VH_ROOT/html/logs/\$VH_NAME.error_log {
	  useServer               0
	  logLevel                ERROR
	  rollingSize             10M
	  keepDays                35
	  compressArchive         1
	}

	accesslog \$VH_ROOT/html/logs/\$VH_NAME.access_log {
	  useServer               0
	  logFormat               "%h %l %u %t "%r" %>s %b "%{Referer}i" "%{User-Agent}i""
	  logHeaders              7
	  rollingSize             10M
	  keepDays                35
	  compressArchive         1
	}

	index  {
	  useServer               0
	  indexFiles              index.php, index.html
	}

	scripthandler  {
	  add                     lsapi:${PHPVER} php
	}

	expires {
	  enableExpires 1
	}

	accessControl {
	  allow *
	}

	phpIniOverride  {
	### Insert common phpIni
	php_admin_flag log_errors On
	php_admin_value error_log logs/php_error_log
	php_admin_value open_basedir "/var/www/${olsdomain}/html:/tmp/"
	### We're adding disable_functions here but it does NOT work as intended with OLS lsphp.  
	### Instead we also add them to the $VH_ROOT/.phpini/php.ini file and depend on the PHP_INI_SCAN_DIR directive to read that file.
	php_admin_value disable_functions "dl, exec, fpassthru, getmypid, getmyuid, highlight_file, link, opcache_get_configuration, passthru, pcntl_exec, pcntl_get_last_error, pcntl_setpriority, pcntl_strerror, pcntl_wifcontinued, phpinfo, popen, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec, show_source, source, system, virtual"
	php_admin_flag allow_url_fopen Off
	php_admin_value session.use_strict_mode 1
	php_admin_value session.cookie_httponly 1
	php_admin_value session.use_cookies 1
	php_admin_value session.use_only_cookies 1
	php_admin_value session.use_trans_sid 0
	php_admin_value memory_limit 128M
	php_admin_value post_max_size 25M
	php_admin_value upload_max_filesize 25M
	php_admin_value max_execution_time 7200		
	}

	realm Default {
	  note                    Default password protected realm

	  userDB  {
	    location              \$SERVER_ROOT/conf/vhosts/\$VH_NAME/htpasswd
	  }

	  groupDB  {
	    location              \$SERVER_ROOT/conf/vhosts/\$VH_NAME/htgroup
	  }
	}
	bubbleWrap                1

	extprocessor ${PHPVER} {
	  type                    lsapi
	  address                 uds://tmp/lshttpd/\$VH_NAME.sock
	  maxConns                35
	  env                     PHP_LSAPI_MAX_REQUESTS=5000
	  env                     PHP_LSAPI_CHILDREN=35
	  env                     PHP_INI_SCAN_DIR=:\$VH_ROOT/.phpini
	  initTimeout             600
	  retryTimeout            0
	  persistConn             1
	  respBuffer              0
	  autoStart               1
	  path                    ${LSDIR}/${PHPVER}/bin/lsphp
	  backlog                 100
	  instances               1
	  runOnStartUp            1
	  priority                0
	  memSoftLimit            2047M
	  memHardLimit            2047M
	  procSoftLimit           400
	  procHardLimit           500
	}

	### Insert context configs below this line
	
	# https://openlitespeed.org/kb/access-control/#Using_a_Context
	context exp:error_log|wp-config-sample.php|\.pl|\.cgi|\.lua|\.perl|\.sql|\.sh|wp-config.php|php.ini|\.log {
	  location                \$DOC_ROOT/\$0
	  allowBrowse             0
	  note                    Block access to scripts and files we don't want executed

	  rewrite  {

	  }
	  addDefaultCharset       off

	  phpIniOverride  {

	  }
	}

	context /logs/ {
	  location                logs/
	  allowBrowse             0
	  note                    Deny public access to logs directory

	  rewrite  {

	  }
	  addDefaultCharset       off

	  phpIniOverride  {

	  }
	}
	# The comment placeholders must remain for header operations to work as expected!!
	context / {
	  allowBrowse             1
	  note                    Default Context Headers
	  extraHeaders            <<<END_extraHeaders
	  # Headers go below this line
		X-XSS-Protection "1; mode=block" always;
		X-Frame-Options "SAMEORIGIN";
		Referrer-Policy no-referrer, strict-origin-when-cross-origin
		Strict-Transport-Security: max-age=31536000; includeSubDomains; preload	  
	  # Headers go above this line
	  END_extraHeaders
	  
	  rewrite  {
	    enable			1
	  }
	
	  addDefaultCharset       off
	
	  phpIniOverride  {

	  }
	}


	rewrite  {
	  enable                  1
	  autoLoadHtaccess        1
	  logLevel                0
	  rules                   <<<END_rules
	RewriteRule ^/wp-content/uploads/.*\.php$ - [F]
	RewriteRule ^/wp-content/files/.*\.php$ - [F]
	RewriteRule ^/wp-content/updraft/.*$ - [F,L]
	RewriteRule "(^|/)\.(?!well-known\/)" - [F]
	END_rules
	}

	vhssl  {
	  keyFile                 /usr/local/lsws/conf/example.key
	  certFile                /usr/local/lsws/conf/example.crt
	  certChain               1
	  sslProtocol             24
	  ciphers                 EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:ECDHE-RSA-AES128-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA128:DHE-RSA-AES128-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA128:ECDHE-RSA-AES128-SHA384:ECDHE-RSA-AES128-SHA128:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA384:AES128-GCM-SHA128:AES128-SHA128:AES128-SHA128:AES128-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
	  enableECDHE             1
	  renegProtection         1
	  sslSessionCache         1
	  enableSpdy              15
	  enableQuic              1
	  enableStapling          1
	  ocspRespMaxAge          86400
	}
	EOF
	chown -R lsadm:lsadm ${VHDIR}/*

	gf_add_domain_ols_httpd_conf ${olsdomain}
	gf_ols_htaccess ${olsdomain}
	gf_ols_phpini ${olsdomain}
}


###################################################################
#### Add domain to httpd conf for ols
####
#### @param $1 domain
###################################################################
function gf_add_domain_ols_httpd_conf() {
	local olsdomain
	local vhost_conf_name
	olsdomain=$1
	default_vhost_conf_name="$olsdomain"
    vhost_conf_name="${2:-$default_vhost_conf_name}" # optional param so we can selectively change vhost conf name from default 'domain.tld' only if provided
	

	NEWKEY="  map                     ${olsdomain} www.${olsdomain}, ${olsdomain}"
	PORT_ARR=$(grep "address.*:[0-9]"  ${WEBCF} | awk '{print substr($2,3)}'|uniq)
	if [  ${#PORT_ARR[@]} != 0 ]
	then
		for PORT in ${PORT_ARR[@]}
		do
			sed -i "/:$PORT$/{N;s/$/\n$NEWKEY/}" "${WEBCF}"
		done
	else
		echo 'No listener port detected, listener setup skip!'
	fi
	echo "
virtualhost ${olsdomain} {
vhRoot                  /var/www/${olsdomain}
configFile              ${VHDIR}/${vhost_conf_name}/$g_vhost_conf
allowSymbolLink         1
enableScript            1
restrained              1
setUIDMode              2
}" >>${WEBCF}
	systemctl restart lsws
}

###################################################################
#### Remove domain from httpd conf for ols
###################################################################
function gf_remove_domain_ols_httpd_conf() {
	local olsdomain
	olsdomain="$1"

	# remove the block like below
	# virtualhost somedomain.tld {
	# vhRoot                  /var/www/somedomain.tld
	# configFile              ${VHDIR}/somedomain.tld/$g_vhost_conf
	# allowSymbolLink         1
	# enableScript            1
	# restrained              1
	# setUIDMode              2
	# user                    $VH_USER
	# group                   $VH_USER
	# }
	sed -i -re "/virtualhost ${olsdomain} \{/{:a;N;/\}/!ba};/vhRoot                  \/var\/www\/$olsdomain/d" ${WEBCF}
	# remove the map lines inserted on the multiple listeners blocks like below
	# map                     somedomain.tld somedomain.tld
	sed -i "/[ ]*map[ ]*${olsdomain} www.${olsdomain}, ${olsdomain}/d" ${WEBCF}
	systemctl restart lsws
}

#####################################################################
### select phpversion for nginx fpm
#####################################################################
function gf_select_phpversion
{
	if [ "$g_webserver_type" = "nginx" ]
	then
		ls /etc/php/ | nl
		read -p "Select PHP version: " site_number
		number_of_sites=$(ls /etc/php/ | wc -l)
		until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
		do
			echo "$site_number: invalid selection."
			read -p "Select PHP version: " site_number
		done
	elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
	then
		ls /usr/local/lsws|grep lsphp | nl
		read -p "Select PHP version: " site_number
		number_of_sites=$(ls /usr/local/lsws|grep lsphp | wc -l)
		until [[ "$site_number" =~ ^[0-9]+$ && "$site_number" -le "$number_of_sites" ]]
		do
			echo "$site_number: invalid selection."
			read -p "Select PHP version: " site_number
		done
	fi
}

#####################################################################
### htaccess default for ols site
#####################################################################
function gf_ols_htaccess
{
	local olsdomain
	local DOCHM
	olsdomain=$1
	DOCHM="/var/www/${olsdomain}/html"
	touch "${DOCHM}/.htaccess"
	# https://openlitespeed.org/kb/migrate-apache-rewrite-rules-to-openlitespeed/#Useful_Examples
	# https://riptutorial.com/bash/example/2135/indenting-here-documents
	# Special Note: Tabs should be maintained for the indenting for this work!
	cat >> "${DOCHM}/.htaccess" <<-'EOL'
	# BEGIN WordPress
	RewriteEngine On
	RewriteBase /
	RewriteRule ^/index.php$ - [L]
	RewriteCond %{REQUEST_FILENAME} !-f
	RewriteCond %{REQUEST_FILENAME} !-d
	RewriteRule . /index.php [L]
	# END WordPress
	EOL
}

#####################################################################
### php.ini default for ols site
#####################################################################
function gf_ols_phpini
{
	local olsdomain
	olsdomain=$1
	PHPINIHM="/var/www/${olsdomain}/.phpini"
	mkdir "${PHPINIHM}"
	touch "${PHPINIHM}/php.ini"
	echo "disable_functions = ${GS_DISABLED_PHP_FUNCTIONS_LIST}" >> "${PHPINIHM}/php.ini"
}

#####################################################################
### setup default ols example page
#####################################################################
function gf_ols_default_page
{
	# https://riptutorial.com/bash/example/2135/indenting-here-documents
	# Special Note: Tabs should be maintained for the indenting for this work!
	cat > "/usr/local/lsws/Example/html/index.html" <<-'EOL'
	<!DOCTYPE html>
	<html lang="en">
	<head>
	</head>
	<body>
		<H1>This is the default page on your Webserver. You are probably here because we could not find the site you are looking for.</H1>
	</body>
	</html>
	EOL
}

#####################################################################
### 7G firewall enable for ols
#####################################################################
function gf_7g_ols_enable {
        local module
        module=$1
        grep -q "# 7G:\[$module\]" /var/www/$domain/html/.htaccess
        if [ $? -ne 0 ]
        then
                sed -n "/# 7G:\[$module\]/, /# 7G:\[$module\] END/p" 7G-Firewall-OLS.txt >> /var/www/$domain/html/.htaccess
                user_name=$(echo $domain | cut -c1-32)
                chown "${user_name}" /var/www/$domain/html/.htaccess
        fi
}

#####################################################################
### 7G firewall rule disable for ols
#####################################################################
function gf_7g_ols_disable {
        local module
        module=$1
        grep -q "# 7G:\[$module\]" /var/www/$domain/html/.htaccess
        if [ $? -eq 0 ]
        then
                sed -i "/# 7G:\[$module\]/,/# 7G:\[$module\] END/d" /var/www/$domain/html/.htaccess
                user_name=$(echo $domain | cut -c1-32)
                chown "${user_name}" /var/www/$domain/html/.htaccess
        fi
}

#####################################################################
### 6G firewall enable for ols
#####################################################################
function gf_6g_ols_enable {
        local module
        module=$1
        grep -q "# 6G:\[$module\]" /var/www/$domain/html/.htaccess
        if [ $? -ne 0 ]
        then
                sed -n "/# 6G:\[$module\]/, /# 6G:\[$module\] END/p" 6G-Firewall-OLS.txt >> /var/www/$domain/html/.htaccess
                user_name=$(echo $domain | cut -c1-32)
                chown "${user_name}" /var/www/$domain/html/.htaccess
        fi
}

#####################################################################
### 6G firewall rule disable for ols
#####################################################################
function gf_6g_ols_disable {
        local module
        module=$1
        grep -q "# 6G:\[$module\]" /var/www/$domain/html/.htaccess
        if [ $? -eq 0 ]
        then
                sed -i "/# 6G:\[$module\]/,/# 6G:\[$module\] END/d" /var/www/$domain/html/.htaccess
                user_name=$(echo $domain | cut -c1-32)
                chown "${user_name}" /var/www/$domain/html/.htaccess
        fi
}

#####################################################################
### Remove an NGINX Site.
###
### @param $1 Domain
### @param $2 Skip_Certbot  (optional - if set, do not delete certificates)
#####################################################################
function gf_remove_nginx_site() {
	local domain
	domain=$1
	skip_certbot=$2

	# Maybe delete ssl certificates
	if [[ -z $skip_certbot ]]
	then
		if grep -qs "listen 443" /etc/nginx/sites-enabled/$domain
		then
			certbot delete --cert-name $domain --noninteractive
		fi
	fi

	rm -f /etc/nginx/sites-*/$domain*
	rm -f /etc/nginx/htpasswd/*$domain
	echo "restarting web server..."
	systemctl restart nginx
	local php_version
	php_version=$(ls /etc/php/*/fpm/pool.d/$domain.conf | cut -d '/' -f 4)
	echo "removing php configuration and restarting php process..."
	rm -f /etc/php/$php_version/fpm/pool.d/$domain.conf
	if [[ ! -f /etc/wpcd/php-versions-disabled/$php_version ]]
	then
		systemctl restart php$php_version-fpm
	fi
}

#####################################################################
### Remove an ols Site.
###
### @param $1 Domain
### @param $2 Skip_Certbot  (optional - if set, do not delete certificates)
#####################################################################
function gf_remove_ols_site() {
	local domain
	local vhost_conf_name
	domain=$1
	skip_certbot=$2
	
	default_vhost_conf_name="$domain"
    vhost_conf_name="${2:-$default_vhost_conf_name}"
	
	# Maybe delete ssl certificates
	if [[ -z $skip_certbot ]]
	then	
		if [ -d "/etc/letsencrypt/live/$domain" ]
		then
			certbot delete --cert-name $domain --noninteractive
		fi
	fi
	
	rm -rf ${VHDIR}/$vhost_conf_name
	rm -rf ${LSDIR}/conf/vhosts-disabled/$vhost_conf_name
	gf_remove_domain_ols_httpd_conf "$domain"
}

#####################################################################
### Restore an ols Site.
###
### @param $1 Domain
#####################################################################
function gf_restore_ols_site() {
	local domain
	domain=$1
	rsync -az vhosts/$domain ${VHDIR}/
	chown -R lsadm:lsadm ${VHDIR}/$domain
	if ! grep -qw "virtualhost $domain " ${WEBCF}
	then
		gf_add_domain_ols_httpd_conf $domain
	fi
}	

#####################################################################
### Restore an nginx Site.
###
### We are assuming that we are in the /root/wp-backups/$domain/temp folder
### when this function is called!!!!
### @see 08-backup.sh around line 306 & 992 as well as 
### 41-wp-backup2.sh around line 490.
###
### @param $1 Domain
#####################################################################
function gf_restore_nginx_site() {
	local domain
	domain=$1
	user_name="$(echo $domain | cut -c1-32)"
	mv sites-enabled/*$domain /etc/nginx/sites-enabled/
	mv htpasswd/*$domain /etc/nginx/htpasswd/ 2>/dev/null

	gf_add_php_conf $domain $user_name 8.1
}

#####################################################################
### Reset file permissions for a site
###
### @param $1 Domain
#####################################################################
function gf_reset_file_permissions_for_domain() {

	# setup local variables from parameters passed in.
	local domain
	domain=$1

	# Get user name from domain (first 32 chars only)
	local user_name	
	user_name=$(echo $domain | cut -c1-32)

	if [[ -z $domain ]]
	then
		msg="The domain variable is blank - unable to change permissions."
		echo $msg
		exit 1
	else
		if [ "$g_webserver_type" = "nginx" ]
		then
			chown -R root:root /var/www/$domain/
			chown -R www-data:www-data /var/www/$domain/html/
			chmod -R g+w /var/www/$domain/html
			chmod -R g+s /var/www/$domain/html
			find /var/www/$domain/html -type f -exec chmod 664 {} +
			find /var/www/$domain/html -type d -exec chmod 2775 {} +
		elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
		then
			chown -R root:root /var/www/"$domain"/
			chown -R "${user_name}":www-data /var/www/"$domain"/html/
			chown -R "${user_name}":www-data /var/www/"$domain"/html/logs/
			# Hidden files test support: https://serverfault.com/a/156481
			chown -R "${user_name}":www-data /var/www/"$domain"/html/.[^.]*
			chmod -R g+ws "/var/www/$domain/html"
			find /var/www/$domain/html -type f -exec chmod 664 {} +
			find /var/www/$domain/html -type d -exec chmod 2775 {} +
		fi
	fi
}

#####################################################################
### Add a .maintenance file to a site.
###
### @param $1 Domain
#####################################################################
function gf_set_maintenance_mode_for_site() {

	# setup local variables from parameters passed in.
	local domain
	domain=$1

	# Get user name from domain (first 32 chars only)
	local user_name	
	user_name=$(echo $domain | cut -c1-32)

	if [[ -z $domain ]]
	then
		msg="We are about to create a .maintenance file but the domain variable is blank. Operation aborted."
		echo $msg
		return 1
	else
		su - "$user_name" -c "wp --skip-plugins --no-color maintenance-mode activate"
	fi

}

#####################################################################
### Remove the .maintenance file to a site.
###
### @param $1 Domain
#####################################################################
function gf_remove_maintenance_mode_for_site() {

	# setup local variables from parameters passed in.
	local domain
	domain=$1

	# Get user name from domain (first 32 chars only)
	local user_name	
	user_name=$(echo $domain | cut -c1-32)	

	if [[ -z $domain ]]
	then
		msg="We are about to delete a file but the domain variable is blank. Operation aborted."
		echo $msg
		return 1
	else
		su - "$user_name" -c "wp --skip-plugins --no-color maintenance-mode deactivate"
	fi
}

#####################################################################
### Get user name for domain
###
### @param $1 Domain
###
### @return g_domain_user_name
#####################################################################
function gf_get_domain_user_name() {

	# setup local variables from parameters passed in.
	local domain
	domain=$1

	g_domain_user_name=$(echo $domain | cut -c1-32)

}

#####################################################################
### Get database host for domain
#####################################################################
function gf_get_dbhost() {
	local domain
	domain=$1
	g_mysql_host=$(grep DB_HOST /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d "," -f2|cut -d")" -f1|tail -c +2 | head -c -2)
	if [ -z $g_mysql_host ]
	then
		g_mysql_host=localhost
	fi
	g_mysql_host_noport=$(echo $g_mysql_host|cut -d: -f1)
}

#####################################################################
### Get database User for domain
#####################################################################
function gf_get_dbuser() {
	local domain
	domain=$1
	g_mysql_user=$(grep DB_USER /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d "," -f2|cut -d")" -f1|tail -c +2 | head -c -2)
}

#####################################################################
### Get database Password for domain
#####################################################################
function gf_get_dbpass() {
	local domain
	domain=$1
	g_mysql_pass=$(grep DB_PASSWORD /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d "," -f2|cut -d")" -f1|tail -c +2 | head -c -2)
}

#####################################################################
### Get database Name for domain
#####################################################################
function gf_get_dbname() {
	local domain
	domain=$1
	g_mysql_name=$(grep DB_NAME /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d "," -f2|cut -d")" -f1|tail -c +2 | head -c -2)
}

#####################################################################
### Get database prefix for domain
#####################################################################
function gf_get_dbprefix() {
	local domain
	domain=$1
	g_mysql_dbprefix=$(grep table_prefix /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d '=' -f2|cut -d';' -f1|tail -c +2 | head -c -2)
}

#####################################################################
### Get database port for domain
#####################################################################
function gf_get_dbport() {
	local domain
	domain=$1
	g_mysql_dbport=$(grep DB_HOST /var/www/$domain/html/wp-config.php | tr -d "[:space:]"|cut -d "," -f2|cut -d")" -f1|tail -c +2 | head -c -2|awk -F: '{print $2}')
	if [ -z $g_mysql_dbport ]
	then
		g_mysql_dbport=3306
	fi
}

#####################################################################
### Check database connection details
#####################################################################
function gf_check_db_connection(){
	local dbhost
	local dbname
	local dbuser
	local dbpass
	local dbport
	dbhost="$1"
	dbname="$2"
	dbuser="$3"
	dbpass="$4"
	dbport="${5:-3306}" # defaults to port 3306 unless provided
	
	database_details_sanitized="database ${dbname} via user: ${dbuser} at host: ${dbhost}:${dbport}"
	
	if mysql --skip-reconnect -h "${dbhost}" -u "${dbuser}" -p"${dbpass}" -P "${dbport}" "${dbname}" -e "SHOW TABLES;" &> /dev/null ; then
		# database exists and is connectable
		echo "Success - we can connect to ${database_details_sanitized}"
	else
		mysql_connection_error="$(mysql -h "${dbhost}" -u "${dbuser}" -p"${dbpass}" -P "${dbport}" "${dbname}" -e "SHOW TABLES;" 2>&1 | tee -a /dev/null)"
		echo "Database connection failed to ${database_details_sanitized} with error: $mysql_connection_error"
		echo "Please ensure remote mysql grants and firewall are configured properly.."
		return 1
	fi
}

#####################################################################
### Add Server metadata to the server metadata file.
###
### $1: Metadata key
### $2: Metadata value
#####################################################################
function gf_set_server_metadata(){
	local metakey;
	local metavalue;
	metakey=$1
	metavalue=$2
	mkdir -p /etc/wpcd
	
	# Move metadata file from old location to new location on legacy servers.
	if [ -f /opt/wpcd-server-info.txt ]
	then
		if [ ! -f /etc/wpcd/wpcd-server-info.txt ]
		then
			mv /opt/wpcd-server-info.txt /etc/wpcd/wpcd-server-info.txt
		fi
	fi
	
	touch /etc/wpcd/wpcd-server-info.txt;
	sed -i "/$metakey=/d" /etc/wpcd/wpcd-server-info.txt
	echo "$metakey=$metavalue" >> /etc/wpcd/wpcd-server-info.txt
}

#####################################################################
### Add general Metadata to the sites metadata file.
### This metadata applies to all sites.
###
### $1: Metadata key
### $2: Metadata value
#####################################################################
function gf_set_sites_metadata(){
	local metakey;
	local metavalue;
	metakey=$1
	metavalue=$2
	mkdir -p /etc/wpcd
	touch /etc/wpcd/wpcd-sites-info.txt;
	sed -i "/$metakey=/d" /etc/wpcd/wpcd-sites-info.txt
	echo "$metakey=$metavalue" >> /etc/wpcd/wpcd-sites-info.txt
}

#####################################################################
### Add Domain Metadata to the domain meta file.
###
### $1: Metadata key
### $2: Metadata value
### $3: Domain
#####################################################################
function gf_set_domain_metadata(){
	local metakey;
	local metavalue;
	local domain;
	metakey=$1
	metavalue=$2
	domain=$3
	mkdir -p /etc/wpcd
	mkdir -p /etc/wpcd/$domain
	touch /etc/wpcd//$domain/$domain;
	sed -i "/$metakey=/d" /etc/wpcd/$domain/$domain
	echo "$metakey=$metavalue" >> /etc/wpcd/$domain/$domain
}


###############################################################################################
### Return Metadata
###
### Eg Usage: gf_get_metadata -t metatype -d domain-name -k key -f default-value 
###
### Metadata Type - can be one of three values 'domain' 'sites' or 'server'
### Metadata key - the key to be read from the meta file.
### Default value - the default value to use if no data is found for the requested key.
### Domain - Only required if requesting data of type 'domain'
###
### @return: wpcd_metavalue is global variable in which requested metadata will be placed.
###############################################################################################
function gf_get_metadata(){
	local metatype;
	local metakey;
	local defaultvalue;
	local domain;
	while getopts 't:k:d:f:' arg
	do
		case ${arg} in
			t) metatype=${OPTARG};;
			k) metakey=${OPTARG};;
			d) domain=${OPTARG};;
			f) defaultvalue=${OPTARG};;
			*) return 1 # illegal option
		esac
	done
	if [ "$metatype" == "server" ]
	then
		wpcd_metavalue=$(grep "$metakey=" /etc/wpcd/wpcd-server-info.txt|cut -d'=' -f2)
	elif [ "$metatype" == "sites" ]
	then
		wpcd_metavalue=$(grep "$metakey=" /etc/wpcd/wpcd-sites-info.txt|cut -d'=' -f2)
	elif [ "$metatype" == "domain" ]
	then
		wpcd_metavalue=$(grep "$metakey=" /etc/wpcd/$domain/$domain|cut -d'=' -f2)
	fi
	if [ -z $wpcd_metavalue ]
	then
		wpcd_metavalue=$defaultvalue
	fi
}

###############################################################################################
### Set the openbase directive for php for a tenant in a multi-tenant site.
###
### $1 = template domain
### $2 = template version (git tag)
### $3 = tenant domain
###############################################################################################
function gf_mt_set_openbasedir(){

	local mt_template_domain
	local git_tag
	local domain
	mt_template_domain=$1
	git_tag=$2
	domain=$3

	# Figure out the MT version folder.
	mt_version_folder="/var/wpcd-mt-versions/$mt_template_domain/versions/$git_tag"

	if [ "$g_webserver_type" = "nginx" ]
	then	
		phpversion=(5.6 7.1 7.2 7.3 7.4 8.0 8.1 8.2)
		for ver in "${phpversion[@]}"
		do	
			if [ -f /etc/php/$ver/fpm/pool.d/$domain.conf ]; then
				echo "Updating open_basedir in /etc/php/$ver/fpm/pool.d/$domain.conf to allow reading from the multi-tenant version folder."
				# delete openbase directive.
				sed -i '/open_basedir/d' /etc/php/$ver/fpm/pool.d/$domain.conf
				# add the new one back in.
				echo "php_admin_value[open_basedir] = \"/var/www/$domain/html/:/tmp/:$mt_version_folder/\"" >> /etc/php/$ver/fpm/pool.d/$domain.conf
				# restart fpm
				sudo systemctl restart php$ver-fpm
			fi
		done
	elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
	then
		echo "ols-is not supported - this operation probably broke your ols site."
		# search and replace needs to be done in this file: ${VHDIR}/${$domain}/$g_vhost_conf 
		# search for php_admin_value open_basedir "/var/www/$domain/html:/tmp/"
		# replace with php_admin_value open_basedir "/var/www/$domain/html:/tmp/:$mt_version_folder/"
	fi

}