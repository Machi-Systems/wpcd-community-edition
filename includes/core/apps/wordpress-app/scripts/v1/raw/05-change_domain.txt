#!/bin/bash

if [[ "$EUID" -ne 0 ]]
then
	echo "Sorry, you need to run this as root"
	exit
fi

## Get our common functions
if [[ ! -f 9999-common-functions.sh ]]
then
	echo "The file 9999-common-functions.sh is missing"
	exit 1
fi
source 9999-common-functions.sh

function database_backup() {
	echo "Backing up database..."
	date=$(date +"%Y-%m-%d"-"%Hh%Mm%Ss")
	mkdir -p /root/.wp-backup/$old_domain/
	gf_get_dbhost $old_domain
	gf_get_dbuser $old_domain
	gf_get_dbname $old_domain
	gf_get_dbpass $old_domain

	mysqldump -h ${g_mysql_host} -u ${g_mysql_user} -p${g_mysql_pass} ${g_mysql_name} | gzip -9 > /root/.wp-backup/$old_domain/"$old_domain"_"$date"_db.gz
	if [ $? -ne 0 ]  
	then
		echo "Database backup failed! Domain change aborted!"
		exit
	fi
	echo "Database backed up to /root/.wp-backup/$old_domain/"$old_domain"_"$date"_db.gz"
}


function rename_nginx_site_confs() {
	mv /etc/php/$php_version/fpm/pool.d/$old_domain.conf /etc/php/$php_version/fpm/pool.d/$new_domain.conf
	# this sed is required only if $new_user_name and $new_domain are not the same
	if [[ "$new_user_name" != "$new_domain" ]]
	then
		sed -i "s/$old_user_name/$new_user_name/g" /etc/php/$php_version/fpm/pool.d/$new_domain.conf
	fi
	sed -i "s/$old_domain/$new_domain/g" /etc/php/$php_version/fpm/pool.d/$new_domain.conf
	rename "s/$old_domain/$new_domain/" /etc/nginx/sites-enabled/"$old_domain"
	rename "s/$old_domain/$new_domain/g" /etc/nginx/sites-enabled/"$old_domain"_* 2>/dev/null
	sed -i "s/$old_domain/$new_domain/g" /etc/nginx/sites-enabled/$new_domain*
}

function rename_ols_site_confs() {
	mv ${VHDIR}/"$old_domain" ${VHDIR}/"$new_domain"
	chown lsadm:lsadm ${VHDIR}/$new_domain/$g_vhost_conf > /dev/null 2>&1
	sed -i "s/$old_domain/$new_domain/g" ${VHDIR}/$new_domain/$g_vhost_conf > /dev/null 2>&1

	# Main config 
	sed -i "s/$old_domain/$new_domain/g" /usr/local/lsws/conf/httpd_config.{conf,xml} 2>/dev/null
}


# Install rename util if not already installed
if ! hash rename 2>/dev/null
then
	apt-get install -y rename
fi


while [[ -z $old_domain ]]
do
	clear
	echo "Please, select which domain you wish to move"
	gf_select_domain
	old_domain=$(ls /var/www | grep -v html | sed -n "$site_number"p)
done


if [[ -z $new_domain ]]
then
	echo
	echo "Enter the destination domain name
	Specify just the domain name without www or http://
	Example: my-new-domain.com"
	read -p "Domain: " new_domain
fi

old_user_name=$(echo $old_domain | cut -c1-32)
new_user_name=$(echo $new_domain | cut -c1-32)

if [ "$g_webserver_type" = "nginx" ]
then
	if ls /etc/nginx/sites-enabled/*_$new_domain 1> /dev/null 2>&1 || [[ -e /etc/nginx/sites-enabled/$new_domain ]]
	then
		echo "Destination domain already exists. Aborting!"
		exit
	fi
	if [[ ! -e /etc/nginx/sites-enabled/$old_domain ]]
	then
		echo "$old_domain NGINX configuration is not present. Aborting!"
		exit
	fi
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	if [ -d "${VHDIR}/$new_domain" ]
	then
		echo "Destination domain already exists. Aborting!"
		exit
	fi
	if [ ! -d "${VHDIR}/$old_domain" ]
	then
		echo "$old_domain ols/lsws config directory: ${VHDIR}/$old_domain is not present. Aborting!"
		exit
	fi
	if gf_is_ssl_ols $old_domain || gf_is_ssl_ols_enterprise $old_domain
	then
		email=`su - $old_user_name -c "wp user list --role=administrator --field=user_email|head -n 1"`
		if [[ -z $email ]]
		then
			echo "Specify an email for administrative notifications about your certificate
			Example: admin@example.com"
			read -p "Email address: " email
		fi
	fi
fi

if [[ ! -d /var/www/$old_domain ]]
then
	echo "$old_domain files are not present. Aborting!"
	exit
fi

while [[ -z $action ]]
do
	echo
	echo "How do you want to perform the domain change?"
	echo
	echo "   1) Change domain only"
	echo "   2) Change domain and replace occurrences in the database (dry run)"
	echo "   3) Change domain and replace occurrences in the database (live run)"
	read -p "Action: " action
	until [[ -z "$action" || "$action" =~ ^[1-3]$ ]]
	do
		echo "$action: invalid selection."
		read -p "Action: " action
	done
done

gf_get_dbname $old_domain
gf_get_dbprefix $old_domain
mysql_db=$g_mysql_name
mysql_dbprefix=$g_mysql_dbprefix
# Let's unset the globals now that they been copied. This prevents them being still set further below when we reuse the same function
unset g_mysql_name
unset g_mysql_dbprefix

if id -u $new_user_name &>/dev/null
then
	echo "User name collision. Aborting..."
	exit
fi

if [[ $action == "domain_only" || $action == "1" ]]
then
	######### Backup database ####
	database_backup
	mariadb <<QUERY
USE $mysql_db;
UPDATE ${mysql_dbprefix}options SET option_value = replace(option_value, '$old_domain', '$new_domain') WHERE option_name = 'home' OR option_name = 'siteurl';
UPDATE ${mysql_dbprefix}posts SET guid = REPLACE (guid, '$old_domain', '$new_domain');
QUERY
	# reset cache
	su - $old_user_name -c "wp cache flush"
	su - $old_user_name -c "wp cache-enabler clear 2>/dev/null"
fi

if [[ $action == "dry_run" || $action == "2" ]]
then
	cd /var/www/$old_domain/html/
	su - $old_user_name -c "wp --skip-plugins search-replace $old_domain $new_domain --all-tables-with-prefix --dry-run"
	echo "Dry run completed. Nothing was changed."
	exit
fi

if [[ $action == "replace_domain" || $action == "3" ]]
then
	######### Backup database ####
	database_backup
	echo "Starting search and replace..."
	cd /var/www/$old_domain/html/
	su - $old_user_name -c "wp --skip-plugins search-replace $old_domain $new_domain --recurse-objects --network --skip-columns=guid --skip-tables=wp_users --all-tables-with-prefix"
	# reset cache
	su - $old_user_name -c "wp cache flush"
	su - $old_user_name -c "wp cache-enabler clear 2>/dev/null"
fi

su - $old_user_name -c "wp --skip-plugins config set DOMAIN_CURRENT_SITE $new_domain --no-add 2>/dev/null"

echo "Setting up new domain files and users..."
sed -i "s/$old_domain/$new_domain/g" /etc/wp-backup.conf 2> /dev/null

if [ "$g_webserver_type" = "nginx" ]
then
	php_version=$(ls /etc/php/*/fpm/pool.d/$old_domain.conf | cut -d '/' -f 4)
	systemctl stop php$php_version-fpm
	rename_nginx_site_confs
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	php_version=$(grep -sEo 'lsphp[0-9]{2}' ${VHDIR}/$old_domain/$g_vhost_conf | awk -F':' '{print $2}'|sort -u)
	rename_ols_site_confs
fi

# Delete old user
userdel $old_user_name -f

# Move all files from old location to new location.
mv /var/www/$old_domain /var/www/$new_domain

# Add new user.
useradd -d "/var/www/$new_domain/html" -g "www-data" -M -s "/bin/bash" $new_user_name

# Permissions for new user.
chown -R $new_user_name:www-data /var/www/$new_domain/html/

# if php.ini exists, search it for the old domain and replace any entries with the new domain.
if [[ -f "/var/www/$new_domain/html/php.ini" ]]
then
	sed -i "s/$old_domain/$new_domain/g" /var/www/$new_domain/html/php.ini
fi

echo "Copying to new database..."
# start of MySQL database name and credentials change, to avoid conflicts (re: issue #132)
mysql_new_db=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_user=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_password=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)

gf_database_create "${mysql_new_db}" "${mysql_user}" "${mysql_password}" "localhost"

gf_get_dbhost $new_domain
gf_get_dbuser $new_domain
gf_get_dbname $new_domain
gf_get_dbpass $new_domain

mysqldump -h ${g_mysql_host} -u ${g_mysql_user} -p${g_mysql_pass} ${g_mysql_name} | mariadb $mysql_new_db
if [ $? -ne 0 ]  
then
	echo "Database copy failed! Process aborted!"
	exit
fi

# drop old database and credentials
mariadb -h $g_mysql_host <<QUERY
DROP DATABASE $g_mysql_name;
DROP USER $g_mysql_user;
FLUSH PRIVILEGES;
QUERY

cd /var/www/$new_domain/html/
su - $new_user_name -c "wp --skip-plugins config set DB_NAME $mysql_new_db"
su - $new_user_name -c "wp --skip-plugins config set DB_USER $mysql_user"
su - $new_user_name -c "wp --skip-plugins config set DB_PASSWORD $mysql_password"
su - $new_user_name -c "wp --skip-plugins config set DB_HOST localhost"
# end of MySQL database name and credentials change, to avoid conflicts (re: issue #132)

# wp-cli doesn't shuffle WP_CACHE_KEY_SALT, which is important for us
# so we use the generator once to get the additional salt we need and shuffle again so there are no duplicates
su - $new_user_name -c "wp --skip-plugins config shuffle-salts"
su - $new_user_name -c 'wp --skip-plugins config set WP_CACHE_KEY_SALT "$(wp --skip-plugins config get AUTH_KEY)"'
su - $new_user_name -c "wp --skip-plugins config shuffle-salts"

# echo "restarting web server..."
# We should NOT restart the webserver here.  It will fail because we have changed some critical paths in the 
# rename_nginx_site_confs function at the top of this file (around line 46 or so).
# If you really really want to do this, then see the following commit in the bitbucket repo:
# 049504a0ef8dda00fbebd07e89f453289b230d88.
# That commmit resets some paths before ssl and updates them after ssl to ensure the web server restarts properly.
# Right now it's not necessary to go through those gyrations because it seems that everything works properly.
# without restarting here.
# gf_restart_webserver

if [ "$g_webserver_type" = "nginx" ]
then
	systemctl restart php$php_version-fpm
	# reissue certificate if previous domain had https enabled and was not a multisite wildcard
	if ! grep -q 'server_name \.' /etc/nginx/sites-enabled/$new_domain && [[ -e /etc/letsencrypt/live/$old_domain/fullchain.pem ]]
	then
		echo "Attempting to obtain new ssl certificates..."
		if grep -qs "managed by Certbot" /etc/nginx/sites-enabled/$new_domain
		then
			sed -i -n '/if ($host/q;p' /etc/nginx/sites-enabled/$new_domain
			sed -i '$ d' /etc/nginx/sites-enabled/$new_domain
			sed -i '/server {/a listen 80;\nlisten [::]:80;' /etc/nginx/sites-enabled/$new_domain
			sed -i '/managed by Certbot/d' /etc/nginx/sites-enabled/$new_domain
		fi
		certbot delete --cert-name $old_domain --noninteractive
		certbot --non-interactive --reinstall --expand --nginx --agree-tos --register-unsafely-without-email --allow-subset-of-names --redirect -d $new_domain -d www.$new_domain
		# Change configuration to HTTP if HTTPS certificate couldn't be obtained
		if [ $? -ne 0 ]
		then
			su - $new_user_name -c "wp --skip-plugins option update home http://$new_domain"
			su - $new_user_name -c "wp --skip-plugins option update siteurl http://$new_domain"
		fi
	fi

	# If we are dealing with a multisite wildcard which had HTTPS enabled...
	if grep -q 'server_name \.' /etc/nginx/sites-enabled/$new_domain && grep -q 'listen 443' /etc/nginx/sites-enabled/$new_domain
	then
		for sitedomain in $(su - $new_user_name -c "wp site list --field=domain")
		do
			su - $new_user_name -c "wp --skip-plugins option update home http://$sitedomain --url=https://$sitedomain/"
			su - $new_user_name -c "wp --skip-plugins option update siteurl http://$sitedomain --url=https://$sitedomain/"
		done
		if grep -qs "managed by Certbot" /etc/nginx/sites-enabled/$new_domain
		then
			sed -i -n '/listen 80/q;p' /etc/nginx/sites-enabled/$new_domain
			sed -i '$ d' /etc/nginx/sites-enabled/$new_domain
			sed -i '/server {/a listen 80;\nlisten [::]:80;' /etc/nginx/sites-enabled/$new_domain
			sed -i '/managed by Certbot/d' /etc/nginx/sites-enabled/$new_domain
		fi
		certbot delete --cert-name $old_domain --noninteractive
		echo "This multisite had wildcard SSL enabled."
		echo "HTTPS has been disabled, it can be configured using 13-multisite.sh"
	fi

	# this part is used for non-wildcard, domain-based multisite setups
	# if a specific site previously had HTTPS enabled, we will get certificates for the new domain
	ls /etc/nginx/sites-enabled/"$new_domain"_* 2>/dev/null | cut -d _ -f 2 |
	while read -r line
	do
		new_domain_2=$line
		old_domain_2=$(echo $line | sed s/$new_domain/$old_domain/g)
		# reissue certificate if previous domain had https enabled
		if [[ -e /etc/letsencrypt/live/$old_domain_2/fullchain.pem ]]
		then
			echo "Attempting to get new certificate for $new_domain\_$line..."
			if grep -qs "managed by Certbot" /etc/nginx/sites-enabled/"$new_domain"_"$line"
			then
				sed -i -n '/if ($host/q;p' /etc/nginx/sites-enabled/"$new_domain"_"$line"
				sed -i '$ d' /etc/nginx/sites-enabled/"$new_domain"_"$line"
				sed -i '/server {/a listen 80;\nlisten [::]:80;' /etc/nginx/sites-enabled/"$new_domain"_"$line"
				sed -i '/managed by Certbot/d' /etc/nginx/sites-enabled/"$new_domain"_"$line"
			fi
			#certbot delete --cert-name $old_domain_2 --noninteractive
			certbot --non-interactive --reinstall --expand --nginx --agree-tos --register-unsafely-without-email --allow-subset-of-names --redirect -d $line -d www.$line
			# Change configuration to HTTP if HTTPS certificate couldn't be obtained
			if [ $? -ne 0 ]
			then
				su - $new_user_name -c "wp --skip-plugins option update home http://$line --url=https://$line/"
				su - $new_user_name -c "wp --skip-plugins option update siteurl http://$line --url=https://$line/"
			fi
		fi
	done
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	if [[ -z $email ]]
	then
		echo "No email set, likely because prior domain did not have ssl enabled. Skipping SSL attempt!"
	else
		gf_disable_https_redirect_ols_htaccess "$new_domain" # Remove existing https any redirects.
		if gf_enable_certbot_ols_site "$new_domain"; then   # This function call echoes any success/failure messages so no need to handle here.
			gf_enable_https_redirect_ols_htaccess "$new_domain"  # This function call echoes any success/failure messages so no need to handle here.
		fi
	fi
fi

echo "cleaning up and restarting web server..."
gf_restart_webserver

echo "Setting up SSH user for new domain..."
sed -i "/Match User $old_user_name/,+2 d" /etc/ssh/sshd_config
mv /var/www/$new_domain/.ssh_$old_domain/ /var/www/$new_domain/.ssh_$new_domain/
echo "Match User $new_user_name
PasswordAuthentication yes
AuthorizedKeysFile /var/www/$new_domain/.ssh_$new_user_name/authorized_keys" >> /etc/ssh/sshd_config
systemctl restart sshd

echo
echo "Domain $old_domain changed to $new_domain"
