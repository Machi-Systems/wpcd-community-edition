#!/bin/bash
if [[ "$EUID" -ne 0 ]]
then
	echo "Sorry, you need to run this as root"
	exit
fi

clear
## Get our common functions
if [[ ! -f 9999-common-functions.sh ]]
then
	echo "The file 9999-common-functions.sh is missing"
	exit 1
fi
source 9999-common-functions.sh

### Check webserver type
pwd=$(pwd)

while [[ -z $domain ]]
do
	echo "Which domain name do you want for your site?
	Specify just the domain name without www or http://
	Example: myblog.com"
	read -p "Domain: " domain
done

while [[ -z $wp_user ]]
do
	echo
	echo "Specify a name for the WordPress administrative user
	Example: admin"
	read -p "Admin user name: " wp_user
done

while [[ -z $wp_password ]]
do
	echo
	echo "Specify a password for the WordPress administrative user"
	read -p "Admin user password: " wp_password
done

while [[ -z $wp_email ]]
do
	echo
	echo "Specify an email address for the WordPress administrative user
	Example: admin@example.com"
	read -p "Email address: " wp_email
done

while [[ -z $wp_version ]]
do
	echo
	echo "Specify your desired WordPress version to install
	Examples: latest, nightly, 4.0, 5.3.2"
	read -p "WordPress version: " wp_version
done

if [[ -z $wp_locale ]]
then
	echo
	echo "Specify a locale for the WordPress installation"
	echo "Or leave blank for en_US"
	read -p "Locale: " wp_locale
	if [[ -z "$wp_locale" ]]
	then
		wp_locale="en_US"
	fi
fi

mysql_db=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_dbprefix=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5)
mysql_user=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_pass=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)

gf_database_create "$mysql_db" "$mysql_user" "$mysql_pass" "localhost"

wphome="/var/www/$domain/html"
user_name="$(echo $domain | cut -c1-32)"

if id -u "$user_name" &>/dev/null
then
	echo "User name collision. Aborting..."
	exit
fi

# Clean up some stuff just in case this domain was installed on this server and not removed cleanly.
rm -rf /etc/wpcd/$domain  # Remove metas.

# Make site folder
mkdir -p "${wphome}/logs"

# Set permissions for new site folder.
useradd -d "${wphome}" -g www-data -M -s "/bin/bash" "${user_name}"
chown -R "${user_name}":www-data "${wphome}"
chmod -R g+ws "$wphome"

# Add virtual host files for webserver.
if [ "$g_webserver_type" = "nginx" ]
then
	echo "The webserver is Nginx....";
	gf_add_php_conf "$domain" "$user_name" 8.1
	gf_add_nginx_conf "$domain" "$domain" "$domain"
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	echo "The webserver is Litespeed....";
	gf_add_ols_conf "$domain"
fi

# Install WordPress using wp-cli
cd "${wphome}"
su - "$user_name" -c "wp --skip-plugins --no-color core download --version=$wp_version --locale=$wp_locale"
su - "$user_name" -c "wp --skip-plugins --no-color config create --dbname=$mysql_db --dbuser=$mysql_user --dbpass=$mysql_pass --dbprefix="$mysql_dbprefix"_"

if hash sendmail 2>/dev/null
then
	su - "$user_name" -c "wp --skip-plugins --no-color core install --url=$domain --title=$domain --admin_user=$wp_user --admin_password=$wp_password --admin_email=$wp_email"
else
	# don't try to send the welcome email if sendmail is not available
	echo "Sendmail was not detected. No email will be sent to the admin when this installation is complete"
	su - "$user_name" -c "wp --skip-plugins --no-color core install --url=$domain --title=$domain --admin_user=$wp_user --admin_password=$wp_password --admin_email=$wp_email --skip-email"
fi

# needed to work around wp-cli issues with passwords containing some special characters
# we hash and salt the $wp_password manually and inject it directly into the database
wp_password_hashed=$(echo "<?php
require_once( '$wphome/wp-load.php' );
\$password = '$wp_password';
\$hash_password = wp_hash_password(\$password);
echo \$hash_password;
?>" | php)

# Redo the password hash to fix a 'segmentation fault' error that occurs with OLS and PHP 8.1
# We can probably remove this entire block once either OLS or PHP fixes the issue.
# Or maybe we can just make this the default method for getting the hash and remove the 
# codeblock above.
if [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	pwtmpfile=$(mktemp)
	echo "<?php
	require_once( '$wphome/wp-load.php' );
	\$password = '$wp_password';
	\$hash_password = wp_hash_password(\$password);
	echo \$hash_password;
	?>"	> $pwtmpfile
	wp_password_hashed=$(php $pwtmpfile)
	rm $pwtmpfile
fi
# End redo password hash for OLS.

# Stick the password hash into the database.
mysql <<QUERY
USE $mysql_db;
UPDATE ${mysql_dbprefix}_users SET user_pass='$wp_password_hashed' WHERE user_login='$wp_user';
QUERY

# Needed so wordpress doesn't freak out and denies direct access
su - "$user_name" -c "wp --skip-plugins --no-color config set FS_METHOD direct"

# Add other important wp-config.php items.
su - "$user_name" -c "wp --skip-plugins --no-color config set WP_AUTO_UPDATE_CORE minor"
su - "$user_name" -c "wp --skip-plugins --no-color config set WP_MEMORY_LIMIT 128M"
su - "$user_name" -c "wp --skip-plugins --no-color config set WP_MAX_MEMORY_LIMIT 128M"
su - "$user_name" -c "wp --skip-plugins --no-color config set CONCATENATE_SCRIPTS false --raw"
su - "$user_name" -c "wp --skip-plugins --no-color config set DISALLOW_FILE_EDIT true --raw"
su - "$user_name" -c "wp --skip-plugins --no-color option update permalink_structure '/%postname%'"

# Turn on the cache constant.
su - "$user_name" -c "wp --skip-plugins --no-color config set WP_CACHE true"

# permissions for the log file
su - "$user_name" -c "touch $wphome/wp-content/debug.log"

chown -R "$user_name":www-data "$wphome"
chmod -R g+ws "$wphome"

# Install page cache
if [ "$g_webserver_type" = "nginx" ]
then
	su - "$user_name" -c "wp  --no-color plugin install --activate cache-enabler"
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	su - "$user_name" -c "wp --skip-plugins --no-color plugin install litespeed-cache && wp --skip-plugins --no-color plugin activate litespeed-cache && wp --no-color litespeed-online init"
fi

# Restart Webserver
gf_restart_webserver

# prepare for ssh public key authentication
mkdir -p "/var/www/$domain/.ssh_$user_name/"
echo "Match User $user_name
PasswordAuthentication yes
AuthorizedKeysFile /var/www/$domain/.ssh_$user_name/authorized_keys" >> /etc/ssh/sshd_config
systemctl restart sshd

# Custom post-processing scripts.
if [[ -n "$post_processing_script_site" ]] # True if the length of string is non-zero. https://www.shellcheck.net/wiki/SC2236
then
	echo ""
	echo "Post-processing script option detected - attempting to pull script from $post_processing_script_site"
	wget --no-check-certificate -O post_processing_script_site.sh "$post_processing_script_site" > /dev/null 2>&1
	dos2unix post_processing_script_site.sh > /dev/null 2>&1
	echo ""
	echo "Executing post-processing script..."
	source ./post_processing_script_site.sh	
fi

echo
echo "WordPress has been set up for $domain"

#####################################################
########   BluePrint Plugins/Themes/Files ###########
#####################################################
if [ -n "$blueprint" ]
then
	cd "$pwd"
	tempdate=$(date +"%Y-%m-%d"-"%Hh%Mm%Ss")
	apt-get install jq -y  > /dev/null 2>&1

	count="$(jq length $blueprint)"
	index=0
	while [ $index -lt $count ]
	do
		mkdir "/tmp/$tempdate"
		destination=$(cat $blueprint |jq .[$index].destination |cut -d'"' -f2)
		source_location=$(cat $blueprint |jq .[$index].source|cut -d'"' -f2)
		username=$(cat $blueprint |jq .[$index].source_access.username|cut -d'"' -f2)
		password=$(cat $blueprint |jq .[$index].source_access.password|cut -d'"' -f2|sed 's/@/%40/g')
		activation=$(cat $blueprint |jq .[$index].activation|cut -d'"' -f2)
		repo=$(cat $blueprint |jq .[$index].source|cut -d'"' -f2 |awk -F'/' '{print $NF}' |cut -d'.' -f1)
		if [ -n "$password" ]
		then
			giturl=$(echo $source_location|sed "s/:\/\//:\/\/$username:$password@/g")
		fi

		######## Github Repo clone #####
		echo "$source_location" |grep -q 'github.com\|gitlab.com\|bitbucket.org'
		if [ $? -eq 0 ]
		then
			if [ -z "$password" ]
			then
				git clone "$source_location" "/tmp/$tempdate/$repo"
			else
				git clone "$giturl" "/tmp/$tempdate/$repo"
			fi
		else
			file=$(echo $source_location |awk -F'/' '{print $NF}')
			wget -q "$source_location" -O "/tmp/$tempdate/$file"
			if [[ $file == *.zip ]]
			then
				unzip "/tmp/$tempdate/$file" -d "/tmp/$tempdate/"
				rm -f "/tmp/$tempdate/$file"
			elif [[ $file == *.tar.gz ]]
			then
				tar xzf "/tmp/$tempdate/$file" -C "/tmp/$tempdate/"
				rm -f "/tmp/$tempdate/$file"
			elif [[ $file == *.tar.bz2 ]]
			then
				tar xjf "/tmp/$tempdate/$file" -C "/tmp/$tempdate/"
				rm -f "/tmp/$tempdate/$file"
			elif [[ $file == *.tar ]]
			then
				tar xf "/tmp/$tempdate/$file" -C "/tmp/$tempdate/"
				rm -f "/tmp/$tempdate/$file"
			fi
		fi
		if [ "$destination" == "theme" ]
		then
			rsync -az /tmp/"$tempdate"/ /var/www/"$domain"/html/wp-content/themes/
			if [ "$activation" == "yes" ]
			then
				su - "$user_name" -c "wp --no-color theme activate $repo"
			fi
		elif [ "$destination" == "plugin" ]
		then
			rsync -az /tmp/"$tempdate"/ /var/www/"$domain"/html/wp-content/plugins/
			if [ "$activation" == "yes" ]
			then
				su - "$user_name" -c "wp --no-color plugin activate $repo"
			fi
		else
			rsync -az /tmp/"$tempdate"/ "/var/www/$domain/html/$destination/"
		fi
		index=$(($index+1))
		rm -rf "/tmp/$tempdate"
	done
	chown -R "$user_name":www-data /var/www/"$domain"/html
	chmod -R g+w /var/www/"$domain"/html
fi
