#!/bin/bash
if [[ "$EUID" -ne 0 ]]
then
	echo "Sorry, you need to run this as root"
	exit 1
fi

## Get our common functions
if [[ ! -f 9999-common-functions.sh ]]
then
	echo "The file 9999-common-functions.sh is missing"
	exit 1
fi
source 9999-common-functions.sh

# Set the webserver type default value if not set by the environment.
# Note that the 9999 script above cannot set the g_webserver_type var yet because 
# at this point nothing is installed on the server!
# This is the only script where the webserver_type var is $webserver_type and not $g_webserver_type.
# the webserver_type var is supposed to be set by the environment before this script is invoked.
if [ -z "$webserver_type" ]
then
	webserver_type="nginx"
fi

webserver_type="$(echo "$webserver_type" | awk '{ print tolower($1) }')"
if [[ "$webserver_type" == "nginx" ]] || [[ "$webserver_type" == "ols" ]] || [[ "$webserver_type" = "ols-enterprise" ]]
then
	# Do nothing - it's valid, that's all we care about.
	echo 
else
	echo "Sorry, you need to provided an invalid webserver: $webserver_type"
	echo "Valid webserver_types are: nginx, ols, ols-enterprise"
	exit 1
fi

if [[ "$interactive" != "no" ]]
then
	clear
	echo "This script will install $webserver_type, MariaDB, PHP, Certbot and WP-CLI in your system."
	echo
	read -p "Press enter to start setup"
fi

if [ "$webserver_type" != "nginx" ]
then
	if grep -q '18.04' /etc/os-release
	then
		echo "OLS not supported on Ubuntu 18.04"
		exit
	fi
fi

# Write the server name out to a file - we might need it later.
gf_set_server_metadata 'servername' $name
gf_set_server_metadata 'post_id' $post_id

# set a variable to hold the location of the checkpoint folder.
CHKPOINT_FOLDER='.wpcd-server-provision-checkpoints'

# create the checkpoint folder
if [ ! -d $CHKPOINT_FOLDER ]
then
	mkdir $CHKPOINT_FOLDER
fi

# clear the screen
clear

#check to see if this script has been run before. if it has, show message on the screen but continue.
if [ -f "$CHKPOINT_FOLDER/script-ran-once.txt" ]
then
	echo "This script has been run at least once before - we'll attempt to pick up from where we last left off.."
else
	#create checkpoint file to indicate that script is running; if for some reason it already exists no harm no foul.
	touch "$CHKPOINT_FOLDER/script-ran-once.txt"
fi

# Force preference of IPV4 over IPV6
# This shouldn't be necessary but some services seem to an issue with IPV6 communication.
# For example, when adding new repos later in this script, it times out with a gpg error 
# when run on ec2.  This section forces IPv4 communication on everything :(
if [ -f "$CHKPOINT_FOLDER/checkpoint05-end.txt" ]
then
	echo "Skip setting IPV4 vs IPV6 preferences since it has already been completed."
else
	echo "precedence ::ffff:0:0/96  100" >> /etc/gai.conf
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint05-end.txt"	
fi #checkpoint05.txt


# Refresh existing repositories
if [ -f "$CHKPOINT_FOLDER/checkpoint10-end.txt" ]
then
	echo "Skip refreshing of repositories since it has already been done."
else
	echo $(date): "Refreshing repositories..."
	apt-get update > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint10-end.txt"	
fi #checkpoint10.txt

# Add other repositories
if [ -f "$CHKPOINT_FOLDER/checkpoint20-end.txt" ]
then
	echo "Skip adding common repositories since it has already been done."
else 
	# Create directory if it doesn't exist. Else, add-apt-repository will be unable to configure the PPAs
	mkdir -p /etc/apt/sources.list.d/

	# Adding common software properties stack
	echo $(date): "Adding common software properties to make repository management easier..."
	apt-get install software-properties-common -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# Adding additional repositories
	echo $(date): "Adding additional repositories..."
	LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/nginx -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	# Make sure CURL is installed.
	apt-get install curl -y > /dev/null 2>&1	

	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint20-end.txt"
fi #checkpoint20.txt

if [ "$webserver_type" = "nginx" ]
then
	# Adding and installing LEMP stack, starting with NGINX and MARIADB - we'll do PHP in the next block.
	# @TODO: We should probably make a loop and loop through all these packages one by one 
	echo $(date): "Installing LEMP stack - this will take a while!"
	apt-get install nginx mariadb-server mariadb-client apache2-utils unzip rename -y > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# Adding and installing PHP stack
	echo $(date): "Installing PHP versions - this will take a while too!"
	phpversion=(5.6 7.1 7.2 7.3 7.4 8.0 8.1 8.2)
	for ver in "${phpversion[@]}"
	do
		echo $(date): ".....PHP $ver"
		apt-get install php$ver php$ver-fpm php$ver-mbstring php$ver-curl php$ver-mysql php$ver-xml php$ver-zip php$ver-gd php$ver-imap php$ver-soap php$ver-bcmath php$ver-imagick php$ver-intl -y > /dev/null 2>&1
		if [ $? -ne 0 ]  
		then
			echo "Failed!  Quitting process"
			exit 1
		fi
	done

	# Use PHP 8.1 as the default
	echo $(date): "Making PHP 8.1 the default PHP version"
	update-alternatives --set php /usr/bin/php8.1 > /dev/null 2>&1
fi

if [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]
then
	# Adding and installing MARIADB.
	echo "$(date): Installing OpenLiteSpeed/OLS Enterprise stack - this will take a while!"

	# OLS/LSPHP installation here specifying lsphp81
	# https://openlitespeed.org/kb/1-click-install/#Where_is_OLS_installed_to
	# Silent with Suppress all except errors
	# https://explainshell.com/explain?cmd=curl+-S+-s+-k+https%3A%2F%2Fraw.githubusercontent.com%2Flitespeedtech%2Fols1clk%2Fmaster%2Fols1clk.sh
	bash <(curl --show-error --silent -k https://raw.githubusercontent.com/litespeedtech/ols1clk/master/ols1clk.sh ) --quiet --lsphp 81 > /dev/null 2>&1
	if [ $? -ne 0 ] 
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	gf_add_ols_main_conf
	gf_ols_default_page
	gf_check_webserver
	gf_restart_webserver
	service lsws status > /dev/null 2>&1
	if [ $? -ne 0 ] 
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	echo "$(date): Installing MariaDB repository and packages"
	apt-get install -y mariadb-server mariadb-client apache2-utils unzip rename bubblewrap > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# install build essentials for pecl/pear and dev requirements
	# We need to do these in pieces otherwise our front-end UI will not like it if it takes too long to report updates.
	echo "$(date): Building pecl/pear essentials - part 1 of 2"
	apt-get install -y libmagickwand-dev pkg-config build-essential snmp pkg-config > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): Building pecl/pear essentials - part 2 of 2"
	apt-get install -y openssl libssl-dev autoconf automake libtool libxml2-dev libssl-dev  > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi	

	# Install all possible lsphp-dev and pear and packages
	# We need to do these in pieces otherwise our front-end UI will not like it if it takes too long to report updates.
	echo "$(date): Installing pear and other related ols packages part 1 of 2"
	apt-get install -y lsphp?? lsphp??-common lsphp??-dev lsphp??-pear lsphp??-mysql > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): Installing pear and other related ols packages part 2 of 2"
	apt-get install -y lsphp??-imap lsphp??-curl lsphp??-gd lsphp??-imap lsphp??-imagick lsphp??-intl lsphp*  > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# Use PHP 8.1 as the default
	echo "$(date): Making PHP 8.1 the default PHP version"
	rm -f /usr/bin/php > /dev/null 2>&1
	rm -f /usr/bin/phar > /dev/null 2>&1
	rm -f /usr/bin/phar.phar > /dev/null 2>&1
	rm -f /usr/bin/pecl > /dev/null 2>&1
	rm -f /usr/lib/pear > /dev/null 2>&1
	# https://stackoverflow.com/questions/55513672/how-to-add-a-path-to-update-alternatives-config-php
	update-alternatives --install /usr/bin/php php /usr/local/lsws/lsphp81/bin/php 111 > /dev/null 2>&1
	update-alternatives --install /usr/bin/phar phar /usr/local/lsws/lsphp81/bin/phar8.1.phar 111 > /dev/null 2>&1
	update-alternatives --install /usr/bin/phar.phar phar.phar /usr/local/lsws/lsphp81/bin/phar8.1.phar 111 > /dev/null 2>&1
	update-alternatives --install /usr/bin/pecl pecl /usr/local/lsws/lsphp81/bin/pecl 111 > /dev/null 2>&1
	update-alternatives --install /usr/lib/pear pear /usr/local/lsws/lsphp81/bin/pear 111 > /dev/null 2>&1
fi


# Install Certbot...
if [ -f "$CHKPOINT_FOLDER/checkpoint100-end.txt" ]
then
	echo "Skip installing certbot since it has already been done."
else	
	echo $(date): "Installing Certbot. This can take more than 5 minutes..."
	if ! hash snap 2>/dev/null
	then
		apt-get install snapd -y
		if [ $? -ne 0 ]
		then
			echo "Failed!  Quitting process"
			exit 1
		fi
	fi
	echo $(date): ".....Installing Snap Core for Certbot..."
	snap install core > /dev/null 2>&1 #run once without error checking - some providers require this to set up some things (eg: promox containers).
	snap install core > /dev/null 2>&1 #run again and then do error checking.
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo $(date): ".....Refreshing Snap Core..."
	snap refresh core > /dev/null 2>&1
	#No checks after the "snap refresh core" command because sometimes the snap servers return a false error.  And refresh isn't critical here.

	echo $(date): ".....Installing Classic Certbot..."
	snap install --classic certbot > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo $(date): ".....Installing Certbot Cloudflare support..."
	snap install certbot-dns-cloudflare > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo $(date): ".....Installing remaining Certbot components..."
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-dnsmadeeasy > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-google > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-ovh > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-route53 > /dev/null 2>&1

	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint100-end.txt"
fi #checkpoint100.txt

# if the unattended-upgrades package isn't installed, install it
if ! dpkg -s unattended-upgrades &>/dev/null
then
	echo $(date): "Installing Unattended Upgrade process since it was not enabled on this server..."
	apt-get install -y unattended-upgrades
fi

################################################################################################################
# For all of these configuration file updates, we want the entire block to run once and only once.
# If it fails halfway, then restarting the script should show an error message.
# Therefore our checkpoint150 logic is a bit different.  
# Also, this is a LARGE block with some commands are NOT indented. so you'll need to search for the end using CTRL-F or 
# similar.
################################################################################################################

if [ -f "$CHKPOINT_FOLDER/checkpoint150.txt" ]
then
	echo "Skip updating configuration files since it has already been done."
	if [ ! -f "$CHKPOINT_FOLDER/checkpoint150-end.txt" ]	
	then
		echo "Block 150, updating configuration files, was started but never completed. We cannot recover - please start over with a new server."
		exit 1
	fi	
else
	#create checkpoint file to indicate that we are running this block.
	touch "$CHKPOINT_FOLDER/checkpoint150.txt"

	# enable unattended-upgrades
	echo 'APT::Periodic::Update-Package-Lists "1";
	APT::Periodic::Unattended-Upgrade "1";' > /etc/apt/apt.conf.d/20auto-upgrades

	# Set up unattended upgrades for the PPAs
	echo $(date): "Adding additional repositories to unattended upgrade process..."
	sed -i '/Unattended-Upgrade::Allowed-Origins /a "LP-PPA-ondrej-nginx:${distro_codename}";' /etc/apt/apt.conf.d/50unattended-upgrades
	sed -i '/Unattended-Upgrade::Allowed-Origins /a "LP-PPA-ondrej-php:${distro_codename}";' /etc/apt/apt.conf.d/50unattended-upgrades	

	if [ "$webserver_type" = "nginx" ]
	then
		# Update php.ini file to increase filesize uploads allowed in WordPress
		echo $(date): "Adding required entries in php.ini to allow for larger file uploads in WordPress..."
		phpversion=(5.6 7.1 7.2 7.3 7.4 8.0 8.1 8.2)
		for ver in "${phpversion[@]}"
		do
			sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/$ver/fpm/php.ini

			# Update php.ini to enable and configure opcache
			sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/$ver/fpm/php.ini
			sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/$ver/fpm/php.ini

			# PHP 8.1 & 8.2 needs a set of default functions added to its global php.ini file because its set to blank for some reason.
			# We're going to use the same list as 7.4.
			phpspecialversion=(8.1 8.2)
			for phpspecialver in "${phpspecialversion[@]}"
			do
				sed -i "s/^disable_functions.*/disable_functions = pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,/g" /etc/php/$phpspecialver/fpm/php.ini
			done

			# Restarting php
			echo $(date): "Restarting PHP processes..."
			systemctl restart php$ver-fpm > /dev/null 2>&1
		done

		# Configure NGINX to accept extra-long domain names (the seven back-slashes are to insert spaces before the actual line is inserted )
		sed -i '/^http {/a \ \n \ \ \ \ \ \ \ # Accept extra-long domain names \n \ \ \ \ \ \ \ server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf

		# Configure nginx worker_cpu_affinity, worker_rlimit_nofile, pcre_jit, multi_accept, worker_connections, accept_mutex, epoll
		sed -i '/^worker_processes auto;/a worker_cpu_affinity auto;' /etc/nginx/nginx.conf
		sed -i '/^worker_processes auto;/a worker_rlimit_nofile 100000;' /etc/nginx/nginx.conf
		sed -i '/^pid \/run\/nginx.pid;/a pcre_jit on;' /etc/nginx/nginx.conf

		sed -i "s/# multi_accept on;/multi_accept on;/g" /etc/nginx/nginx.conf  ## Search for commented out multi_accept_on and uncomment it.
		sed -i "s/worker_connections 768;/worker_connections 2048;/g" /etc/nginx/nginx.conf  ## search for existing worker_connections directive and increase it.

		sed -i '/^events {/a \ \ \ \ \ \ \ \ use epoll;' /etc/nginx/nginx.conf  ## add epoll directive to events block
		sed -i '/^events {/a \ \ \ \ \ \ \ \ accept_mutex on;' /etc/nginx/nginx.conf ## add accept_mutex directive to events block

		# sed -i '/^http {/a \ \ \ \ \ \ \  # TLS Dynamic Records Patch: See https://github.com/nginx-modules/ngx_http_tls_dyn_size \n \ \ \ \ \ \ \ ssl_dyn_rec_enable on;' /etc/nginx/nginx.conf  ## ssl_dyn_rec_enable
		sed -i '/^http {/a \ \n \ \ \ \ \ \ \ # AIO: See https://www.nginx.com/blog/thread-pools-boost-performance-9x/ and http://nginx.org/en/docs/http/ngx_http_core_module.html#aio \n \ \ \ \ \ \ \ aio threads;' /etc/nginx/nginx.conf  ## AIO threads
		sed -i '/^http {/a \ \ \ \ \ \ \ \ variables_hash_bucket_size 512;' /etc/nginx/nginx.conf ## increase size of hash table
		sed -i '/^http {/a \ \ \ \ \ \ \ \ variables_hash_max_size 4096;' /etc/nginx/nginx.conf  ## increase size of hash table
		sed -i '/^http {/a \ \ \ \ \ \ \ \ keepalive_timeout 8;' /etc/nginx/nginx.conf ## add keepalive_timeout directive to http block to reduce keep_alive directive from the default 75s to 8s.
		sed -i '/^http {/a \ \ \ \ \ \ \ \ reset_timedout_connection on;' /etc/nginx/nginx.conf ## add reset_timedout_connection directive to remove data from memory as soon as a connection times out. See http://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection

		# Install rate limiting zone for wp-login.php (the seven back-slashes are to insert spaces before the actual line is inserted )
		sed -i '/default_type application\/octet-stream;/a \ \n \ \ \ \ \ \ \ # Set zone to restrict rate of trying certain actions - primarily logins \n \ \ \ \ \ \ \ limit_req_zone \$binary_remote_addr zone=WPLOGIN:10m rate=10r\/s;' /etc/nginx/nginx.conf

		# Create some folders to hold user custom config files
		mkdir -p /etc/nginx/userconfigs/
		mkdir -p /etc/nginx/userconfigs/http		# User custom configs for the the http block will go here.
		mkdir -p /etc/nginx/userconfigs/server		# User custom configs for the server block will go here.
		mkdir -p /etc/nginx/userconfigs/site		# User custom configs for a particular site will go here.

		# Make sure we include the /etc/nginx/userconfigs/http/*.conf files in the nginx.conf file.
		sed -i '/include \/etc\/nginx\/conf.d\/\*.conf;/a \ \ \ \ \ \ \ \ include \/etc\/nginx\/userconfigs\/http\/*[.]conf;' /etc/nginx/nginx.conf  

		# create /etc/nginx/common/6g.conf, which will contain the 6G Firewall 
		echo $(date): "Installing 6G Firewall..."
		mkdir -p /etc/nginx/common/
		cat > /etc/nginx/common/6g.conf << 'EOF'
# 6G Firewall mappings adapted from https://perishablepress.com/6g/

# User agents
map $http_user_agent $bad_bot {
default 0;
"~*([a-z0-9]{2000})" 1;
~*(archive.org|binlar|casper|checkpriv|choppy|clshttp|cmsworld|diavol|dotbot|extract|feedfinder|flicky|g00g1e|harvest|heritrix|htmlparser|libwww|httrack|kmccrew|loader|miner|nikto|nutch|planetwork|postrank|purebot|pycurl|python|seekerspider|siclab|skygrid|sqlmap|sucker|turnit|vikspider|winhttp|xxxyy|youda|zmeu|zune) 2;
}

# Referrers
map $http_referer $bad_referer {
default 0;
"~*([a-z0-9]{2000})" 1;
~*(semalt.com|todaperfeita) 2;
}

# Query strings
map $query_string $bad_querystring {
default 0;
~*(eval\() 1;
~*(127\.0\.0\.1) 2;
"~*([a-z0-9]{2000})" 3;
"~*(javascript:)(.*)(;)" 4;
~*(base64_encode)(.*)(\() 5;
~*(GLOBALS|REQUEST)(=|\[|%) 6;
~*(<|%3C)(.*)script(.*)(>|%3) 7;
~*(\\|\.\.\.|\.\./|~|`|<|>|\|) 8;
~*(boot\.ini|etc/passwd|self/environ) 9;
~*(thumbs?(_editor|open)?|tim(thumb)?)\.php 10;
~*(\'|\")(.*)(drop|insert|md5|select|union|concat) 11;
~*(/|%2f)(:|%3a)(/|%2f) 12;
}

# Request strings
map $request_uri $bad_request {
default 0;
"~*([a-z0-9]{2000})" 1;
~*(ftp|php):/ 2;
~*(base64_encode)(.*)(\() 3;
~*(=\\\'|=\\%27|/\\\'/?)\. 4;
"~*/(\$(\&)?|\*|\"|\.ht|,|&|&amp;?)/?$" 5;
~*(\{0\}|\(/\(|\.\.\.|\+\+\+|\\\"\\\") 6;
"~*(~|`|<|>|;|\\|\s|\{|\}|\[|\]|\|)" 7;
~*/(=|\$&|_mm|cgi-|etc/passwd|muieblack) 8;
"~*(&pws=0|\_vti\_|\(null\)|\{\$itemURL\}|echo(.*)kae|etc/passwd|eval\(|self/environ)" 9;
~*\.(aspx?|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rar|rdf)$ 10;
~*/(^$|(wp-)?config|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell)\.php 11;
}

# Request methods
map $request_method $not_allowed_method {
default 0;
~*^(connect) 1;
~*^(debug) 2;
~*^(delete) 3;
~*^(move) 4;
~*^(patch) 5;
~*^(put) 6;
~*^(trace) 7;
~*^(track) 8;
}
EOF


		# create /etc/nginx/common/7g.conf, which will contain the 7G Firewall 
		echo $(date): "Installing 7G Firewall..."
		mkdir -p /etc/nginx/common/
		cat > /etc/nginx/common/7g.conf << 'EOF'
# 7G FIREWALL - NGINX v1.6
# @ https://perishablepress.com/7g-firewall-nginx/

map $query_string $bad_querystring_7g {
	
	default 0;
	
	"~*([a-z0-9]{2000,})" 1;
	"~*(/|%2f)(:|%3a)(/|%2f)" 2;
	"~*(order(\s|%20)by(\s|%20)1--)" 3;
	"~*(/|%2f)(\*|%2a)(\*|%2a)(/|%2f)" 4;
	"~*(ckfinder|fckeditor|fullclick)" 5;
	"~*(`|<|>|\^|\|\\|0x00|%00|%0d%0a)" 6;
	"~*((.*)header:|(.*)set-cookie:(.*)=)" 7;
	"~*(localhost|127(\.|%2e)0(\.|%2e)0(\.|%2e)1)" 8;
	"~*(cmd|command)(=|%3d)(chdir|mkdir)(.*)(x20)" 9;
	"~*(globals|mosconfig([a-z_]{1,22})|request)(=|\[)" 10;
	"~*(/|%2f)((wp-)?config)((\.|%2e)inc)?((\.|%2e)php)" 11;
	"~*(thumbs?(_editor|open)?|tim(thumbs?)?)((\.|%2e)php)" 12;
	"~*(absolute_|base|root_)(dir|path)(=|%3d)(ftp|https?)" 13;
	"~*(s)?(ftp|inurl|php)(s)?(:(/|%2f|%u2215)(/|%2f|%u2215))" 14;
	"~*(\.|20)(get|the)(_|%5f)(permalink|posts_page_url)(\(|%28)" 15;
	"~*((boot|win)((\.|%2e)ini)|etc(/|%2f)passwd|self(/|%2f)environ)" 16;
	"~*(((/|%2f){3,3})|((\.|%2e){3,3})|((\.|%2e){2,2})(/|%2f|%u2215))" 17;
	"~*(benchmark|char|exec|fopen|function|html)(.*)(\(|%28)(.*)(\)|%29)" 18;
	"~*(php)([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})" 19;
	"~*(e|%65|%45)(v|%76|%56)(a|%61|%31)(l|%6c|%4c)(.*)(\(|%28)(.*)(\)|%29)" 20;
	"~*(/|%2f)(=|%3d|$&|_mm|cgi(\.|-)|inurl(:|%3a)(/|%2f)|(mod|path)(=|%3d)(\.|%2e))" 21;
	"~*(<|%3c)(.*)(e|%65|%45)(m|%6d|%4d)(b|%62|%42)(e|%65|%45)(d|%64|%44)(.*)(>|%3e)" 22;
	"~*(<|%3c)(.*)(i|%69|%49)(f|%66|%46)(r|%72|%52)(a|%61|%41)(m|%6d|%4d)(e|%65|%45)(.*)(>|%3e)" 23;
	"~*(<|%3c)(.*)(o|%4f|%6f)(b|%62|%42)(j|%4a|%6a)(e|%65|%45)(c|%63|%43)(t|%74|%54)(.*)(>|%3e)" 24;
	"~*(<|%3c)(.*)(s|%73|%53)(c|%63|%43)(r|%72|%52)(i|%69|%49)(p|%70|%50)(t|%74|%54)(.*)(>|%3e)" 25;
	"~*(\+|%2b|%20)(d|%64|%44)(e|%65|%45)(l|%6c|%4c)(e|%65|%45)(t|%74|%54)(e|%65|%45)(\+|%2b|%20)" 26;
	"~*(\+|%2b|%20)(i|%69|%49)(n|%6e|%4e)(s|%73|%53)(e|%65|%45)(r|%72|%52)(t|%74|%54)(\+|%2b|%20)" 27;
	"~*(\+|%2b|%20)(s|%73|%53)(e|%65|%45)(l|%6c|%4c)(e|%65|%45)(c|%63|%43)(t|%74|%54)(\+|%2b|%20)" 28;
	"~*(\+|%2b|%20)(u|%75|%55)(p|%70|%50)(d|%64|%44)(a|%61|%41)(t|%74|%54)(e|%65|%45)(\+|%2b|%20)" 29;
	"~*(\\x00|(\"|%22|\'|%27)?0(\"|%22|\'|%27)?(=|%3d)(\"|%22|\'|%27)?0|cast(\(|%28)0x|or%201(=|%3d)1)" 30;
	"~*(g|%67|%47)(l|%6c|%4c)(o|%6f|%4f)(b|%62|%42)(a|%61|%41)(l|%6c|%4c)(s|%73|%53)(=|\[|%[0-9A-Z]{0,2})" 31;
	"~*(_|%5f)(r|%72|%52)(e|%65|%45)(q|%71|%51)(u|%75|%55)(e|%65|%45)(s|%73|%53)(t|%74|%54)(=|\[|%[0-9A-Z]{2,})" 32;
	"~*(j|%6a|%4a)(a|%61|%41)(v|%76|%56)(a|%61|%31)(s|%73|%53)(c|%63|%43)(r|%72|%52)(i|%69|%49)(p|%70|%50)(t|%74|%54)(:|%3a)(.*)(;|%3b|\)|%29)" 33;
	"~*(b|%62|%42)(a|%61|%41)(s|%73|%53)(e|%65|%45)(6|%36)(4|%34)(_|%5f)(e|%65|%45|d|%64|%44)(e|%65|%45|n|%6e|%4e)(c|%63|%43)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(.*)(\()(.*)(\))" 34;
	"~*(@copy|\$_(files|get|post)|allow_url_(fopen|include)|auto_prepend_file|blexbot|browsersploit|(c99|php)shell|curl(_exec|test)|disable_functions?|document_root|elastix|encodeuricom|exploit|fclose|fgets|file_put_contents|fputs|fsbuff|fsockopen|gethostbyname|grablogin|hmei7|input_file|open_basedir|outfile|passthru|phpinfo|popen|proc_open|quickbrute|remoteview|root_path|safe_mode|shell_exec|site((.){0,2})copier|sux0r|trojan|user_func_array|wget|xertive)" 35;
	"~*(;|<|>|\'|\"|\)|%0a|%0d|%22|%27|%3c|%3e|%00)(.*)(/\*|alter|base64|benchmark|cast|concat|convert|create|encode|declare|delete|drop|insert|md5|request|script|select|set|union|update)" 36;
	"~*((\+|%2b)(concat|delete|get|select|union)(\+|%2b))" 37;
	"~*(union)(.*)(select)(.*)(\(|%28)" 38;
	"~*(concat|eval)(.*)(\(|%28)" 39;
	
}

map $request_uri $bad_request_7g {
	
	default 0;
	
	"~*(\^|`|<|>|\\|\|)" 1;
	"~*([a-z0-9]{2000,})" 2;
	"~*(=?\\\(\'|%27)/?)(\.)" 3;
	"~*(/)(\*|\"|\'|\.|,|&|&amp;?)/?$" 4;
	"~*(\.)(php)(\()?([0-9]+)(\))?(/)?$" 5;
	"~*(/)(vbulletin|boards|vbforum)(/)?" 6;
	"~*(/)((.*)header:|(.*)set-cookie:(.*)=)" 7;
	"~*(/)(ckfinder|fck|fckeditor|fullclick)" 8;
	"~*(\.(s?ftp-?)config|(s?ftp-?)config\.)" 9;
	"~*(\{0\}|\"?0\"?=\"?0|\(/\(|\.\.\.|\+\+\+|\\\")" 10;
	"~*(thumbs?(_editor|open)?|tim(thumbs?)?)(\.php)" 11;
	"~*(\.|20)(get|the)(_)(permalink|posts_page_url)(\()" 12;
	"~*(///|\?\?|/&&|/\*(.*)\*/|/:/|\\\\|0x00|%00|%0d%0a)" 13;
	"~*(/%7e)(root|ftp|bin|nobody|named|guest|logs|sshd)(/)" 14;
	"~*(/)(etc|var)(/)(hidden|secret|shadow|ninja|passwd|tmp)(/)?$" 15;
	"~*(s)?(ftp|http|inurl|php)(s)?(:(/|%2f|%u2215)(/|%2f|%u2215))" 16;
	"~*(/)(=|\$&?|&?(pws|rk)=0|_mm|_vti_|cgi(\.|-)?|(=|/|;|,)nt\.)" 17;
	"~*(\.)(ds_store|htaccess|htpasswd|init?|mysql-select-db)(/)?$" 18;
	"~*(/)(bin)(/)(cc|chmod|chsh|cpp|echo|id|kill|mail|nasm|perl|ping|ps|python|tclsh)(/)?$" 19;
	"~*(/)(::[0-9999]|%3a%3a[0-9999]|127\.0\.0\.1|localhost|makefile|pingserver|wwwroot)(/)?" 20;
	"~*(\(null\)|\{\$itemURL\}|cAsT\(0x|echo(.*)kae|etc/passwd|eval\(|self/environ|\+union\+all\+select)" 21;
	"~*(/)?j((\s)+)?a((\s)+)?v((\s)+)?a((\s)+)?s((\s)+)?c((\s)+)?r((\s)+)?i((\s)+)?p((\s)+)?t((\s)+)?(%3a|:)" 22;
	"~*(/)(awstats|(c99|php|web)shell|document_root|error_log|listinfo|muieblack|remoteview|site((.){0,2})copier|sqlpatch|sux0r)" 23;
	"~*(/)((php|web)?shell|crossdomain|fileditor|locus7|nstview|php(get|remoteview|writer)|r57|remview|sshphp|storm7|webadmin)(.*)(\.|\()" 24;
	"~*(/)(author-panel|class|database|(db|mysql)-?admin|filemanager|htdocs|httpdocs|https?|mailman|mailto|msoffice|_?php-my-admin(.*)|tmp|undefined|usage|var|vhosts|webmaster|www)(/)" 25;
	"~*(base64_(en|de)code|benchmark|child_terminate|curl_exec|e?chr|eval|function|fwrite|(f|p)open|html|leak|passthru|p?fsockopen|phpinfo|posix_(kill|mkfifo|setpgid|setsid|setuid)|proc_(close|get_status|nice|open|terminate)|(shell_)?exec|system)(.*)(\()(.*)(\))" 26;
	"~*(/)(^$|00.temp00|0day|3index|3xp|70bex?|admin_events|bkht|(php|web)?shell|c99|config(\.)?bak|curltest|db|dompdf|filenetworks|hmei7|index\.php/index\.php/index|jahat|kcrew|keywordspy|libsoft|marg|mobiquo|mysql|nessus|php-?info|racrew|sql|vuln|(web-?|wp-)?(conf\b|config(uration)?)|xertive)(\.php)" 27;
	"~*(\.)(7z|ab4|ace|afm|ashx|aspx?|bash|ba?k?|bin|bz2|cfg|cfml?|cgi|conf\b|config|ctl|dat|db|dist|dll|eml|engine|env|et2|exe|fec|fla|git|hg|inc|ini|inv|jsp|log|lqd|make|mbf|mdb|mmw|mny|module|old|one|orig|out|passwd|pdb|phtml|pl|profile|psd|pst|ptdb|pwd|py|qbb|qdf|rar|rdf|save|sdb|sql|sh|soa|svn|swf|swl|swo|swp|stx|tar|tax|tgz|theme|tls|tmd|wow|xtmpl|ya?ml|zlib)$" 28;
	
}

map $http_user_agent $bad_bot_7g {
	
	default 0;
	
	"~*([a-z0-9]{2000,})" 1;
	"~*(&lt;|%0a|%0d|%27|%3c|%3e|%00|0x00)" 2;
	"~*(ahrefs|alexibot|majestic|mj12bot|rogerbot)" 3;
	"~*((c99|php|web)shell|remoteview|site((.){0,2})copier)" 4;
	"~*(econtext|eolasbot|eventures|liebaofast|nominet|oppo\sa33)" 5;
	"~*(base64_decode|bin/bash|disconnect|eval|lwp-download|unserialize|\\\x22)" 6;
	"~*(acapbot|acoonbot|asterias|attackbot|backdorbot|becomebot|binlar|blackwidow|blekkobot|blexbot|blowfish|bullseye|bunnys|butterfly|careerbot|casper|checkpriv|cheesebot|cherrypick|chinaclaw|choppy|clshttp|cmsworld|copernic|copyrightcheck|cosmos|crescent|cy_cho|datacha|demon|diavol|discobot|dittospyder|dotbot|dotnetdotcom|dumbot|emailcollector|emailsiphon|emailwolf|extract|eyenetie|feedfinder|flaming|flashget|flicky|foobot|g00g1e|getright|gigabot|go-ahead-got|gozilla|grabnet|grafula|harvest|heritrix|httrack|icarus6j|jetbot|jetcar|jikespider|kmccrew|leechftp|libweb|linkextractor|linkscan|linkwalker|loader|masscan|miner|mechanize|morfeus|moveoverbot|netmechanic|netspider|nicerspro|nikto|ninja|nutch|octopus|pagegrabber|petalbot|planetwork|postrank|proximic|purebot|pycurl|python|queryn|queryseeker|radian6|radiation|realdownload|scooter|seekerspider|semalt|siclab|sindice|sistrix|sitebot|siteexplorer|sitesnagger|skygrid|smartdownload|snoopy|sosospider|spankbot|spbot|sqlmap|stackrambler|stripper|sucker|surftbot|sux0r|suzukacz|suzuran|takeout|teleport|telesoft|true_robots|turingos|turnit|vampire|vikspider|voideye|webleacher|webreaper|webstripper|webvac|webviewer|webwhacker|winhttp|wwwoffle|woxbot|xaldon|xxxyy|yamanalab|yioopbot|youda|zeus|zmeu|zune|zyborg)" 7;
	
}

map $http_referer $bad_referer_7g {
	
	default 0;
	
	"~*(semalt\.com|todaperfeita)" 1;
	"~*(order(\s|%20)by(\s|%20)1--)" 2;
	"~*(blue\spill|cocaine|ejaculat|erectile|erections|hoodia|huronriveracres|impotence|levitra|libido|lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby|ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)" 3;
	
}

map $request_method $not_allowed_method_7g {
	
	default 0;
	
	"~*^(connect)" 1;
	"~*^(debug)" 2;
	"~*^(move)" 3;
	"~*^(trace)" 4;
	"~*^(track)" 5;
	
}
EOF


		echo $(date): "Installing common nginx entries..."
		# create /etc/nginx/common/cache_enabler.conf which contains needed configuration for the Cache Enabler plugin
		cat > /etc/nginx/common/cache_enabler.conf << 'EOF'
# This file defines variables needed for the Cache Enabler WordPress plugin by KeyCDN
# It just defines variables and doesn't do much by iteslf.
# It's meant to be included in the site configuration

set $cache_uri $request_uri;

# bypass cache if POST requests or URLs with a query string
if ($request_method = POST) {
set $cache_uri 'nullcache';
}
if ($query_string != "") {
set $cache_uri 'nullcache';
}

# bypass cache if URLs containing the following strings
if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(index)?.xml|[a-z0-9-]+-sitemap([0-9]+)?.xml)") {
set $cache_uri 'nullcache';
}

# bypass cache if the cookies containing the following strings
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_logged_in") {
set $cache_uri 'nullcache';
}

# custom sub directory e.g. /blog
set $custom_subdir '';

# default html files
# two variables with and without a slash need to be defined to satisfy following situations:
# https://myblog.com/hello-world
# https://myblog.com/hello-world/
set $cache_enabler_uri '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}${scheme}-index.html';
set $cache_enabler_uri2 '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}/${scheme}-index.html';

# webp html files
# two variables with and without a slash need to be defined to satisfy following situations:
# https://myblog.com/hello-world
# https://myblog.com/hello-world/
if ($http_accept ~* "image/webp") {
set $cache_enabler_uri '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}${scheme}-index-webp.html';
set $cache_enabler_uri2 '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}/${scheme}-index-webp.html';
}
EOF

		# create /etc/nginx/common/gzip.conf which contains needed configuration to enable gzip for certain file types
		cat > /etc/nginx/common/gzip.conf << 'EOF'
##
# Gzip Settings
##

gzip on;

gzip_disable "msie6";

gzip_vary on;
gzip_static on;
gzip_proxied expired no-cache no-store private auth;
gzip_comp_level 6;
gzip_buffers 32 16k;
gzip_http_version 1.1;
gzip_min_length 10240;

gzip_types
application/atom+xml
application/geo+json
application/javascript
application/json
application/ld+json
application/manifest+json
application/rdf+xml
application/rss+xml
application/vnd.ms-fontobject
application/wasm
application/x-font-opentype
application/x-font-truetype
application/x-font-ttf
application/x-javascript
application/x-web-app-manifest+json
application/xhtml+xml
application/xml
application/xml+rss
font/eot
font/opentype
font/otf
image/bmp
image/svg+xml
image/vnd.microsoft.icon
image/x-icon
image/x-win-bitmap
text/cache-manifest
text/calendar
text/css
text/javascript
text/markdown
text/plain
text/vcard
text/vnd.rim.location.xloc
text/vtt
text/x-component
text/x-cross-domain-policy
text/xml;
EOF

		# create /etc/nginx/common/browsercache.conf which contains items that should be cached by the browser
		cat > /etc/nginx/common/browsercache.conf << 'EOF'

# Graphics files should be cached by the browser for long periods of time
location ~* \.(?:ogg|ogv|svg|svgz|eot|otf|woff|woff2|ttf|jpg|jpeg|gif|png|ico|bmp|swf)$ {

add_header Cache-Control "public, max-age=30000000, stale-while-revalidate=7, stale-if-error=7";
access_log off;
log_not_found off;
expires 300d;

}

# CSS and JS files should be cached by the browser for short periods of time
location ~* \.(?:css|js|less|scss)$ {

add_header Cache-Control "public, max-age=600000, stale-while-revalidate=7, stale-if-error=7";
access_log off;
log_not_found off;
expires 7d;

}

EOF

		echo '# block access to hidden files/dirs (except .well-known)
location ~ /\.(?!well-known) {
deny all;
}

# do not allow running of any other cgi scripts
location ~ (\.pl$|\.cgi$|\.lua$|\.py$|\.perl$|\.sh$) {
	return 444;
}

# block download of .log and .sql files
location ~\.(log|sql)$ {
deny all;
}

# block access to wp-content/updraft
location ~ /(wp-content/updraft) {
deny all;
}

# deny access to .php files in the uploads directory
location ~* /(?:uploads|files)/.*\.php\$ {
deny all;
}

# hide nginx version
server_tokens off;

# hide X-Powered-By header
fastcgi_hide_header X-Powered-By;
' > /etc/nginx/common/deny.conf

	fi

	if [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]
	then
		echo "$(date): Setup php sessions for lsphp versions"
		# Create the session path directories and chmod it for security to 1733 like the existing one is.
		for version in $(ls /usr/local/lsws|grep lsphp); 
		do
			mkdir -p "/var/lib/lsphp/session/$version"
			chmod -R 1733 "/var/lib/lsphp/session/$version"
		done

		for phpver in $(ls -1 /usr/local/lsws/ |grep lsphp | sed 's/lsphp//g') 
		do
			# echo "LSPHP $phpver" ; # Disable useless echo but leave for debugging
			lsphpver=$(echo $phpver | sed 's/^\(.\{1\}\)/\1./');   # remove periods so that 8.1 becomes 81 and 8.2 becomes 82 etc.
			sed -i -e "s|^;session.save_path.*|session.save_path = '/var/lib/lsphp/session/lsphp${phpver}'|g" -e "s|^session.save_path.*|session.save_path = '/var/lib/lsphp/session/lsphp${phpver}'|g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini ;
			# /usr/local/lsws/lsphp${phpver}/bin/php -i |grep -Ei 'session.save_path' && echo "" # Disable useless echo but leave for debugging
	
			sed -i 's/^memory_limit.*/memory_limit = 1024M/g' /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
		    sed -i 's/^post_max_size.*/post_max_size = 25M/g' /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
		    sed -i 's/^upload_max_filesize.*/upload_max_filesize = 25M/g' /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i 's/^max_execution_time.*/max_execution_time = 7200/g' /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			# Update php.ini to enable and configure opcache
			sed -i "s/;opcache.enable=1/opcache.enable=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini

			# PHP 8.1 and 8.2 needs a set of default functions added to its global php.ini file because its set to blank for some reason.
			# We're going to use the same list as 7.4.
			phpspecialversion=(8.1 8.2)
			for phpspecialver in "${phpspecialversion[@]}"
			do
				lsphpspecialver=$(echo $phpspecialver | sed 's/^\(.\{1\}\)/\1./');  # remove periods so that 8.1 becomes 81 and 8.2 becomes 82 etc.
				sed -i "s/^disable_functions.*/disable_functions = pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,/g" /usr/local/lsws/lsphp${phpspecialver}/etc/php/${lsphpspecialver}/litespeed/php.ini
			done

			# Added 11-13-2022 due to vhost phpIniOverride stopped working in latest OLS version.
			# Unlike NGINX, we have to allow proc_open and proc_close for OLS to run properly when installing a new site later.
			# So those are not included in the global restricted functions list.
			# sed -i "s/^disable_functions.*/disable_functions = dl, exec, fpassthru, getmypid, getmyuid, highlight_file, link, opcache_get_configuration, passthru, pcntl_exec, pcntl_get_last_error, pcntl_setpriority, pcntl_strerror, pcntl_wifcontinued, phpinfo, popen, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_get_status, proc_nice, proc_terminate, shell_exec, show_source, source, system, virtual/g" /usr/local/lsws/lsphp${phpver}/etc/php/${lsphpver}/litespeed/php.ini
			
		done

		echo "$(date): Installing Cron to scan every 3 minutes for .htaccess file changes and restart openlitespeed"
		cat >> /etc/cron.d/openlitespeed_htaccess_scan <<-EOL
# Cron to scan every 3 minutes for .htaccess file changes and restart openlitespeed
*/3 * * * * root if ! find /var/www/*/html/ -maxdepth 2 -type f -newer /usr/local/lsws/cgid -name '.htaccess' -exec false {} +; then systemctl restart lsws; fi
EOL
		chmod +x /etc/cron.d/openlitespeed_htaccess_scan > /dev/null 2>&1
		
		# Setup symlink of the ols/lsws logs folder "/usr/local/lsws/logs" into the conventional /var/log/ folder into /var/log/lsws
		# This breaks the least amount of things for existing users without needing global config changes and ensures pros familiar with OLS aren't confused when looking and people unfamiliar with OLS still see the logs where conventionally they expect too.
		ln -s /usr/local/lsws/logs /var/log/lsws > /dev/null 2>&1
		
		echo "$(date): Update pecl for lsphp versions"
		for version in $(ls /usr/local/lsws|grep lsphp)
		do
			/usr/local/lsws/"${version}"/bin/pecl channel-update pecl.php.net > /dev/null 2>&1
		done

		echo "$(date): Update timezone to UTC by default"
		for phpver in $(ls -1 /usr/local/lsws/ |grep lsphp | sed 's/lsphp//g')
		do
			php_ini="/usr/local/lsws/lsphp${phpver}/etc/php/$(echo $phpver | sed 's/^\(.\{1\}\)/\1./')/litespeed/php.ini"
			# Extension='timezonedb';
			# Subshell should do what we want by capturing it all and also combining both streams into dev null
			# (printf '\n' |/usr/local/lsws/lsphp${phpver}/bin/pecl install ${Extension} >/dev/null 2>&1) >/dev/null 2>&1
			
			# We really don't need to check error conditions on timezonedb. I think I've seen cases where it throws weird exit codes.
			# Or where it might not exist yet when php81/82 came out, the timezonedb extension wasn't out for a few weeks which isn't a big deal but shouldn't cause fatal error.
			# Only add timezonedb extension if binary is actually installed.
			# if find /usr/local/lsws/lsphp${phpver}/lib/php/ -type f -iname "timezonedb.so" >/dev/null 2>&1 ; then
			# 	echo ".....Installing timezondb into php.ini for PHP $phpver..."
			# 	echo "extension=${Extension}.so" >> ${php_ini}
			# else
			# 	echo ".....TimezoneDB extension not found for PHP $phpver - the module will not be installed."
			# fi
			
			sed -i -e 's|^;date.timezone.*|date.timezone = "UTC"|g' /usr/local/lsws/lsphp${phpver}/etc/php/$(echo $phpver | sed 's/^\(.\{1\}\)/\1./')/litespeed/php.ini;
			php_utc_result=$(/usr/local/lsws/lsphp${phpver}/bin/php -i 2>&1 | grep -Ei 'date.timezone')
			if ! echo "$php_utc_result"| grep UTC >/dev/null 2>&1
			then
				echo "Configuring Timezone for UTC for LSPHP $phpver failed"
				echo "Found: $php_utc_result"
			fi
       		done
	fi
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint150-end.txt"	
fi #checkpoint150.txt
##################### End very large block, checkpoint150 ###############

# Running a specific update (This fixes an issue with WP-CLI that popped up around Nov 20th 2021 - some weird compilation message.)
# @see: https://bugs.php.net/bug.php?id=81640
echo $(date): "Updating libpcre-2-8-0..."
apt-get install -y libpcre2-8-0 > /dev/null 2>&1

# Getting WPCLI Packages
echo $(date): "Getting and installing WPCLI packages..."
wget --quiet -O /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
sudo chmod +x /usr/local/bin/wp
wp cli update --yes --allow-root  > /dev/null 2>&1


# if aws cli is not present, install it
if ! hash aws2 2>/dev/null; then
	echo $(date): "Getting and installing AWS CLI..."
	# detect if we are on an ARM or x86_64 system
	if [ "$(uname -m)" = "aarch64" ]; then
		# ARM
		curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"  > /dev/null 2>&1
	else
		# x86_64
		curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"  > /dev/null 2>&1
	fi
	unzip awscliv2.zip  > /dev/null 2>&1
	./aws/install  > /dev/null 2>&1
	rm -rf aws awscliv2.zip  > /dev/null 2>&1
fi

# Make sure update-notifier is installed - weirdly some vms/containers don't have this installed.
echo $(date): "Installing update-notifier..."
apt-get install -y update-notifier-common > /dev/null 2>&1

# Running a specific update to resolve an issue that showed up on Feb 14th 2023.
# @see: https://bugs.launchpad.net/ubuntu/+source/update-notifier/+bug/2007311
echo $(date): "Updating libxmlb2..."
apt-get install -y libxmlb2 > /dev/null 2>&1

# ufw
echo $(date): "Configuring firewall..."
apt-get install ufw -y > /dev/null 2>&1
ssh_port=$(grep 'Port ' /etc/ssh/sshd_config | head -n 1 | cut -d " " -f 2)
ufw default deny incoming > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup default incoming firewall rules! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw default allow outgoing > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup default outgoing firewall rules! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow $ssh_port > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup ssh port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow 80 > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup http port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow 443 > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup https port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi
if [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]
then
	# This is where we would open the port to allow the litespeed browser management interface on port 7080.
	# But we're not allowing that now since the default pages allow an attacker to view php config and other sensitive info.
	# The console also is, by default, not protected by SSL.
	# Users can open the port using the firewall script later if they need this.
	
	# ufw allow 7080 > /dev/null 2>&1
	# if [ $? -ne 0 ]
	# then
	#	echo "Unable to setup OLS/LSWS admin port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
	# fi
	echo
fi

ufw --force enable > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to activate firewall! This is not a fatal error but you should investigate this after this server process is complete."
fi

# pointer needed for the wp-sync script
echo "### do not edit from here ###" >> /etc/ssh/sshd_config

if [ "$webserver_type" = "nginx" ]
then
	# Create folder that will hold semaphore flags about php versions.
	mkdir -p /etc/wpcd
	mkdir -p /etc/wpcd/php-versions-disabled

	phpversion=(5.6 7.1 7.2 7.3)
	for ver in "${phpversion[@]}"
	do
		# Disable php versions earlier than php7.4 and greater.
		systemctl stop php$ver-fpm > /dev/null 2>&1
		systemctl disable php$ver-fpm > /dev/null 2>&1

		# Write semaphore flags indicating that php versions 5.6, 7.1, 7.2 and 7.3 have been disabled.
		echo `date +%d-%m-%Y` > /etc/wpcd/php-versions-disabled/$ver
	done

	# restart nginx
	systemctl enable php8.1-fpm
	systemctl restart php8.1-fpm
	systemctl enable nginx
	systemctl restart nginx
elif [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]
then
	gf_restart_webserver
fi

# Custom post-processing scripts.
if [[ ! -z $post_processing_script_server ]]
then
	echo ""
	echo "Post-processing script option detected - attempting to pull script from $post_processing_script_server"
	wget --no-check-certificate -O post_processing_script_server.sh $post_processing_script_server > /dev/null 2>&1
	dos2unix post_processing_script_server.sh > /dev/null 2>&1
	echo ""
	echo "Executing post-processing script..."
	source ./post_processing_script_server.sh	
fi

echo
echo "$(date): Installation completed!"
echo
