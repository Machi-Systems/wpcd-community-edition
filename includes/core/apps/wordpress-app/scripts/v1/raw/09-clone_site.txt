#!/bin/bash

######################################################
# Script notes:
#   If you are cloning a tenant site this script
#   will not work in interactive mode because it 
#   does not ask for the tenant data required
#   to update the php openbasdirective for the
#   new site.
#   To clone such a site you must set the 
#   environment variables.
######################################################


if [[ "$EUID" -ne 0 ]]
then
	echo "Sorry, you need to run this as root"
	exit
fi

## Get our common functions
if [[ ! -f 9999-common-functions.sh ]]
then
	echo "The file 9999-common-functions.sh is missing"
	exit 1
fi
source 9999-common-functions.sh

while [[ -z $old_domain ]]
do
	clear
	echo "Please, select which site you wish to clone"
	gf_select_domain
	old_domain=$(ls /var/www | grep -v html | sed -n "$site_number"p)
done

while [[ -z $new_domain ]]
do
	echo
	echo "Enter the destination domain name
	Specify just the domain name without www or http://
	Example: my-new-domain.com"
	read -p "Domain: " new_domain
done

old_user_name=$(echo $old_domain | cut -c1-32)
new_user_name=$(echo $new_domain | cut -c1-32)

if [ "$g_webserver_type" = "nginx" ]
then
	if ls /etc/nginx/sites-enabled/*_$new_domain 1> /dev/null 2>&1 || [[ -e /etc/nginx/sites-enabled/$new_domain ]]
	then
		echo "Destination domain already exists. Aborting!"
		exit
	fi
	if [[ ! -e /etc/nginx/sites-enabled/$old_domain ]]
	then
		echo "$old_domain NGINX configuration is not present. Aborting!"
		exit
	fi
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	if [ -d "${VHDIR}/$new_domain" ]
	then
		echo "Destination domain already exists. Aborting!"
		exit
	fi    
	if [ ! -d "${VHDIR}/$old_domain" ]
	then
		echo "$old_domain ols/lsws config directory: ${VHDIR}/$old_domain is not present. Aborting!"
		exit
	fi
	if gf_is_ssl_ols $old_domain || gf_is_ssl_ols_enterprise $old_domain
	then
		email=`su - $old_user_name -c "wp user list --role=administrator --field=user_email|head -n 1"`
		if [[ -z $email ]]
		then
			echo "Specify an email for administrative notifications about your certificate
			Example: admin@example.com"
			read -p "Email address: " email
		fi
	fi
fi

if [[ ! -d /var/www/$old_domain ]]
then
	echo "$old_domain files are not present. Aborting!"
	exit
fi

if id -u $new_user_name &>/dev/null
then
	echo "User name collision. Aborting..."
	exit
fi

mysql_new_db=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_user=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_password=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)

gf_get_dbhost $old_domain
gf_get_dbname $old_domain
gf_get_dbuser $old_domain
gf_get_dbpass $old_domain
gf_get_dbport $old_domain

gf_database_create "${mysql_new_db}" "${mysql_user}" "${mysql_password}" "localhost"

mysqldump --routines -h $g_mysql_host_noport -P $g_mysql_dbport -u $g_mysql_user -p"$g_mysql_pass" $g_mysql_name | mysql $mysql_new_db

useradd -d "/var/www/$new_domain/html" -g "www-data" -M -s "/bin/bash" $new_user_name

mkdir -p /var/www/$new_domain/html/
cp -r /var/www/$old_domain/html/* /var/www/$new_domain/html/

# Add Vhost config based on webserver_type
if [ "$g_webserver_type" = "nginx" ]
then
	php_version=$(ls /etc/php/*/fpm/pool.d/$old_domain.conf | cut -d '/' -f 4)
	gf_add_php_conf $new_domain $new_user_name $php_version
	gf_add_nginx_conf $new_domain $new_domain $new_domain

	# if $old_domain had a wildcard configuration, make $new_domain a wildcard configuration too
	if grep -q 'server_name \.' /etc/nginx/sites-enabled/$old_domain
	then
		sed -i "/server_name $new_domain/c\ \ \ \ server_name .$new_domain;" /etc/nginx/sites-enabled/$new_domain
	fi

	# Add rewrite rules needed for subdir-based multisite
	if grep -qs "rewrite \/wp-admin\$ \$scheme\:\/\/\$host\$uri\/ permanent\;" /etc/nginx/sites-enabled/$old_domain
	then
		sed -i '/server_name/a \ \n    if \(\!-e \$request_filename\) \{\n        rewrite /wp-admin\$ \$scheme://\$host\$uri/ permanent\;  \n        rewrite \^\(/\[\^/\]+\)\?\(/wp-.\*\) \$2 last\;                     \n        rewrite \^\(/\[\^/\]+\)\?\(/.\*\\.php\) \$2 last\;                   \n    \}' /etc/nginx/sites-enabled/$new_domain
	fi

	# this part is used for non wildcard, domain-based multisite setups
	ls /etc/nginx/sites-enabled/"$old_domain"_* 2>/dev/null | sed "s/$old_domain/$new_domain/g" | cut -d _ -f 2 |
	while read -r line
	do
		gf_add_nginx_conf $line $new_domain "$new_domain"_"$line"
	done
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	gf_add_ols_conf $new_domain
fi

# Setup openbasedir if the old site was a tenant
# Note that interactively running this script will not ask for these vars.
if [[ -n "$mt_template_domain" ]]
then
	gf_mt_set_openbasedir $mt_template_domain $mt_version $new_domain
fi

chown -R $new_user_name:www-data /var/www/$new_domain/html/
chmod -R g+w /var/www/$new_domain/html
chmod -R g+s /var/www/$new_domain/html

cd /var/www/$new_domain/html/
su - $new_user_name -c "wp --skip-plugins config set DB_NAME $mysql_new_db"
su - $new_user_name -c "wp --skip-plugins config set DB_USER $mysql_user"
su - $new_user_name -c "wp --skip-plugins config set DB_PASSWORD $mysql_password"
su - $new_user_name -c "wp --skip-plugins config set DB_HOST localhost"
su - $new_user_name -c "wp --skip-plugins search-replace $old_domain $new_domain --recurse-objects --network --skip-columns=guid --skip-tables=wp_users --all-tables-with-prefix"

# wp-cli doesn't shuffle WP_CACHE_KEY_SALT, which is important for us
# so we use the generator once to get the additional salt we need and shuffle again so there are no duplicates
su - $new_user_name -c "wp --skip-plugins config shuffle-salts"
su - $new_user_name -c 'wp --skip-plugins config set WP_CACHE_KEY_SALT "$(wp --skip-plugins config get AUTH_KEY)"'
su - $new_user_name -c "wp --skip-plugins config shuffle-salts"

# Flush page caches and disable object caches.
su - $new_user_name -c "wp cache flush"
if [ "$g_webserver_type" = "nginx" ]
then
	su - $new_user_name -c "wp cache-enabler clear 2>/dev/null"
fi
rm -f wp-content/object-cache.php
if [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	su - $new_user_name -c "wp litespeed-option set object false 2>/dev/null"
	su - $new_user_name -c "wp cache flush 2>/dev/null"  
fi
su - $new_user_name -c "wp plugin uninstall --deactivate redis-cache 2>/dev/null"
su - $new_user_name -c "wp --skip-plugins config set DOMAIN_CURRENT_SITE $new_domain --no-add 2>/dev/null"


# Possibly issue SSL certificates or, if not, change the domain on the site to plain old 'http'
if [ "$g_webserver_type" = "nginx" ]
then
	# reissue certificate if previous domain had https enabled and was not a multisite wildcard
	if ! grep -q 'server_name \.' /etc/nginx/sites-enabled/$new_domain && grep -q 'listen 443' /etc/nginx/sites-enabled/$old_domain
	then
		echo "Attempting to obtain new ssl certificates..."
		certbot --non-interactive --reinstall --expand --nginx --agree-tos --register-unsafely-without-email --allow-subset-of-names --redirect -d $new_domain -d www.$new_domain
		# Change configuration to HTTP if HTTPS certificate couldn't be obtained
		if [ $? -ne 0 ]
		then
			su - $new_user_name -c "wp --skip-plugins option update home http://$new_domain"
			su - $new_user_name -c "wp --skip-plugins option update siteurl http://$new_domain"
		fi

		if ! grep -qs "listen 443" /etc/nginx/sites-enabled/$new_domain
		then
			echo
			echo "SSL could not be enabled for $new_domain"
		else
			echo
			echo "SSL has been enabled for $new_domain"		
		fi
	fi

	# If we are dealing with a multisite wildcard which had HTTPS enabled...
	if grep -q 'server_name \.' /etc/nginx/sites-enabled/$new_domain && grep -q 'listen 443' /etc/nginx/sites-enabled/$old_domain
	then
		for sitedomain in $(su - $new_user_name -c "wp site list --field=domain")
		do
			su - $new_user_name -c "wp --skip-plugins option update home http://$sitedomain --url=https://$sitedomain/"
			su - $new_user_name -c "wp --skip-plugins option update siteurl http://$sitedomain --url=https://$sitedomain/"
		done
		if grep -qs "managed by Certbot" /etc/nginx/sites-enabled/$new_domain
		then
			sed -i -n '/listen 80/q;p' /etc/nginx/sites-enabled/$new_domain
			sed -i '$ d' /etc/nginx/sites-enabled/$new_domain
			sed -i '/server {/a listen 80;\nlisten [::]:80;' /etc/nginx/sites-enabled/$new_domain
			sed -i '/managed by Certbot/d' /etc/nginx/sites-enabled/$new_domain
		fi
		certbot delete --cert-name $old_domain --noninteractive
		echo "This multisite had wildcard SSL enabled."
		echo "HTTPS has been disabled, it can be configured using 13-multisite.sh"
	fi

	# this part is used for non-wildcard, domain-based multisite setups
	# if a specific site previously had HTTPS enabled, we will get certificates for the new domain
	ls /etc/nginx/sites-enabled/"$new_domain"_* 2>/dev/null | cut -d _ -f 2 |
	while read -r line
	do
		new_domain_2=$line
		old_domain_2=$(echo $line | sed s/$new_domain/$old_domain/g)
		# reissue certificate if previous domain had https enabled
		if [[ -e /etc/letsencrypt/live/$old_domain_2/fullchain.pem ]]
		then
			echo "Attempting to get new certificate for $new_domain\_$line..."
			certbot --non-interactive --reinstall --expand --nginx --agree-tos --register-unsafely-without-email --allow-subset-of-names --redirect -d $line -d www.$line
			# Change configuration to HTTP if HTTPS certificate couldn't be obtained
			if [ $? -ne 0 ]
			then
				su - $new_user_name -c "wp --skip-plugins option update home http://$line --url=https://$line/"
				su - $new_user_name -c "wp --skip-plugins option update siteurl http://$line --url=https://$line/"
			fi
		fi
	done
elif [ "$g_webserver_type" = "ols" ]  || [ "$g_webserver_type" = "ols-enterprise" ]
then
	if gf_is_ssl_ols $old_domain || gf_is_ssl_ols_enterprise $old_domain
	then
		echo "Attempting to obtain new ssl certificates..."
		gf_disable_https_redirect_ols_htaccess "$new_domain" # Remove existing https any redirects.
		if gf_enable_certbot_ols_site "$new_domain"; then   # This function call echoes any success/failure messages so no need to handle here.
			gf_enable_https_redirect_ols_htaccess "$new_domain"  # This function call echoes any success/failure messages so no need to handle here.
		fi		
		if [ ! -f /etc/letsencrypt/live/$new_domain/fullchain.pem  ]
		then
			su - $new_user_name -c "wp --skip-plugins option update home http://$new_domain"
			su - $new_user_name -c "wp --skip-plugins option update siteurl http://$new_domain"
		fi
	fi
fi

chmod -R g+w /var/www/$new_domain/html
gf_restart_webserver

# Before attempting to remove the files from the www folder, make sure we have a value in the $domain var.
# At this point we should have it since it was validated earlier.  This is just a prophylactic check.
if [[ -z $new_domain ]]
then
	echo "Unable to proceed because the new domain name is blank. Operation has only partially succeeded and sites are probably in an unstable state."
	exit 1
else 
	rm -rf /var/www/$new_domain/.ssh_$old_user_name/
fi

mkdir -p /var/www/$new_domain/.ssh_$new_user_name/
echo "Match User $new_user_name
PasswordAuthentication yes
AuthorizedKeysFile /var/www/$new_domain/.ssh_$new_user_name/authorized_keys" >> /etc/ssh/sshd_config
systemctl restart sshd

echo
echo "$old_domain has been cloned to $new_domain"
